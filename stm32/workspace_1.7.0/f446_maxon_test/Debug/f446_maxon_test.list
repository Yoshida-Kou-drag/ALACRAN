
f446_maxon_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005388  08005388  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005388  08005388  00015388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005390  08005390  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005390  08005390  00015390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005394  08005394  00015394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000070  08005408  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08005408  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef5d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020da  00000000  00000000  0002effd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000310d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000df8  00000000  00000000  00031f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a6d  00000000  00000000  00032d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f83c  00000000  00000000  000557fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d367c  00000000  00000000  00065039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001386b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004814  00000000  00000000  00138708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005274 	.word	0x08005274

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005274 	.word	0x08005274

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b5b0      	push	{r4, r5, r7, lr}
 80005aa:	b0cc      	sub	sp, #304	; 0x130
 80005ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fe67 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f8e9 	bl	8000788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 fb45 	bl	8000c44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 faef 	bl	8000b9c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005be:	f000 f981 	bl	80008c4 <MX_TIM1_Init>
  MX_SPI1_Init();
 80005c2:	f000 f94d 	bl	8000860 <MX_SPI1_Init>
  MX_TIM2_Init();
 80005c6:	f000 fa41 	bl	8000a4c <MX_TIM2_Init>
  MX_TIM3_Init();
 80005ca:	f000 fa93 	bl	8000af4 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 80005ce:	f000 fb0f 	bl	8000bf0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  short duty;
  int cnt= 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  int cnt2 = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  char rxbuf[]="Start SPI test\r\n";
 80005de:	4b5d      	ldr	r3, [pc, #372]	; (8000754 <main+0x1ac>)
 80005e0:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	682b      	ldr	r3, [r5, #0]
 80005ec:	7023      	strb	r3, [r4, #0]
  char enter[] = "\r\n";
 80005ee:	4a5a      	ldr	r2, [pc, #360]	; (8000758 <main+0x1b0>)
 80005f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80005f4:	6812      	ldr	r2, [r2, #0]
 80005f6:	4611      	mov	r1, r2
 80005f8:	8019      	strh	r1, [r3, #0]
 80005fa:	3302      	adds	r3, #2
 80005fc:	0c12      	lsrs	r2, r2, #16
 80005fe:	701a      	strb	r2, [r3, #0]
  unsigned char aTxBuffer[] = {0};
 8000600:	2300      	movs	r3, #0
 8000602:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
  uint8_t aRxBuffer[2]={0};
 8000606:	2300      	movs	r3, #0
 8000608:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100

  HAL_UART_Transmit(&huart2,(uint8_t*) rxbuf, sizeof(rxbuf), 100);
 800060c:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000610:	2364      	movs	r3, #100	; 0x64
 8000612:	2211      	movs	r2, #17
 8000614:	4851      	ldr	r0, [pc, #324]	; (800075c <main+0x1b4>)
 8000616:	f003 f9b8 	bl	800398a <HAL_UART_Transmit>

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800061a:	2100      	movs	r1, #0
 800061c:	4850      	ldr	r0, [pc, #320]	; (8000760 <main+0x1b8>)
 800061e:	f002 fa0b 	bl	8002a38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000622:	2104      	movs	r1, #4
 8000624:	484e      	ldr	r0, [pc, #312]	; (8000760 <main+0x1b8>)
 8000626:	f002 fa07 	bl	8002a38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800062a:	2108      	movs	r1, #8
 800062c:	484c      	ldr	r0, [pc, #304]	; (8000760 <main+0x1b8>)
 800062e:	f002 fa03 	bl	8002a38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8000632:	210c      	movs	r1, #12
 8000634:	484a      	ldr	r0, [pc, #296]	; (8000760 <main+0x1b8>)
 8000636:	f002 f9ff 	bl	8002a38 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800063a:	213c      	movs	r1, #60	; 0x3c
 800063c:	4849      	ldr	r0, [pc, #292]	; (8000764 <main+0x1bc>)
 800063e:	f002 fb69 	bl	8002d14 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000642:	213c      	movs	r1, #60	; 0x3c
 8000644:	4848      	ldr	r0, [pc, #288]	; (8000768 <main+0x1c0>)
 8000646:	f002 fb65 	bl	8002d14 <HAL_TIM_Encoder_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2102      	movs	r1, #2
 800064e:	4847      	ldr	r0, [pc, #284]	; (800076c <main+0x1c4>)
 8000650:	f001 f926 	bl	80018a0 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_3,100);
 8000654:	4b42      	ldr	r3, [pc, #264]	; (8000760 <main+0x1b8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2264      	movs	r2, #100	; 0x64
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,0);
 800065c:	4b40      	ldr	r3, [pc, #256]	; (8000760 <main+0x1b8>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2200      	movs	r2, #0
 8000662:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2101      	movs	r1, #1
 8000668:	4840      	ldr	r0, [pc, #256]	; (800076c <main+0x1c4>)
 800066a:	f001 f919 	bl	80018a0 <HAL_GPIO_WritePin>
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,100);
 800066e:	4b3c      	ldr	r3, [pc, #240]	; (8000760 <main+0x1b8>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2264      	movs	r2, #100	; 0x64
 8000674:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000676:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <main+0x1b8>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2200      	movs	r2, #0
 800067c:	639a      	str	r2, [r3, #56]	; 0x38
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(1){
	    //ラズパイからの応答まち
	 	HAL_SPI_TransmitReceive(&hspi1,(uint8_t*)aTxBuffer,(uint8_t*)aRxBuffer,1,100);
 800067e:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8000682:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	9300      	str	r3, [sp, #0]
 800068a:	2301      	movs	r3, #1
 800068c:	4838      	ldr	r0, [pc, #224]	; (8000770 <main+0x1c8>)
 800068e:	f001 febe 	bl	800240e <HAL_SPI_TransmitReceive>
	 	 if(aRxBuffer[0]!=0){
 8000692:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 8000696:	2b00      	cmp	r3, #0
 8000698:	d0f1      	beq.n	800067e <main+0xd6>
	 		 aTxBuffer[0]=aRxBuffer[0];
 800069a:	f897 3100 	ldrb.w	r3, [r7, #256]	; 0x100
 800069e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104

	 		 break;
 80006a2:	bf00      	nop
	 	 }
	  }
	  //�?字化けを防ぐため文字�?�に置き換えてPCに送信
	  char PC_txdata[256]={'\0'};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	3304      	adds	r3, #4
 80006ac:	22fc      	movs	r2, #252	; 0xfc
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fc39 	bl	8003f28 <memset>
	  sprintf(PC_txdata,"%s",aRxBuffer);
 80006b6:	f507 7280 	add.w	r2, r7, #256	; 0x100
 80006ba:	463b      	mov	r3, r7
 80006bc:	492d      	ldr	r1, [pc, #180]	; (8000774 <main+0x1cc>)
 80006be:	4618      	mov	r0, r3
 80006c0:	f003 fcc8 	bl	8004054 <siprintf>
	  HAL_UART_Transmit(&huart2,(uint8_t*)PC_txdata, sizeof(PC_txdata), 100);
 80006c4:	4639      	mov	r1, r7
 80006c6:	2364      	movs	r3, #100	; 0x64
 80006c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006cc:	4823      	ldr	r0, [pc, #140]	; (800075c <main+0x1b4>)
 80006ce:	f003 f95c 	bl	800398a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2,(uint8_t*) enter, sizeof(enter), 100);
 80006d2:	f507 7184 	add.w	r1, r7, #264	; 0x108
 80006d6:	2364      	movs	r3, #100	; 0x64
 80006d8:	2203      	movs	r2, #3
 80006da:	4820      	ldr	r0, [pc, #128]	; (800075c <main+0x1b4>)
 80006dc:	f003 f955 	bl	800398a <HAL_UART_Transmit>

	  if(aTxBuffer[0] == 48){
 80006e0:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 80006e4:	2b30      	cmp	r3, #48	; 0x30
 80006e6:	d10d      	bne.n	8000704 <main+0x15c>
		  printf( "motor stop\r\n" );
 80006e8:	4823      	ldr	r0, [pc, #140]	; (8000778 <main+0x1d0>)
 80006ea:	f003 fcab 	bl	8004044 <puts>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2101      	movs	r1, #1
 80006f2:	481e      	ldr	r0, [pc, #120]	; (800076c <main+0x1c4>)
 80006f4:	f001 f8d4 	bl	80018a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2102      	movs	r1, #2
 80006fc:	481b      	ldr	r0, [pc, #108]	; (800076c <main+0x1c4>)
 80006fe:	f001 f8cf 	bl	80018a0 <HAL_GPIO_WritePin>
 8000702:	e010      	b.n	8000726 <main+0x17e>
	  } else if(aTxBuffer[0] == 49){
 8000704:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8000708:	2b31      	cmp	r3, #49	; 0x31
 800070a:	d10c      	bne.n	8000726 <main+0x17e>
		  printf( "motor rolling\r\n" );
 800070c:	481b      	ldr	r0, [pc, #108]	; (800077c <main+0x1d4>)
 800070e:	f003 fc99 	bl	8004044 <puts>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2101      	movs	r1, #1
 8000716:	4815      	ldr	r0, [pc, #84]	; (800076c <main+0x1c4>)
 8000718:	f001 f8c2 	bl	80018a0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2102      	movs	r1, #2
 8000720:	4812      	ldr	r0, [pc, #72]	; (800076c <main+0x1c4>)
 8000722:	f001 f8bd 	bl	80018a0 <HAL_GPIO_WritePin>
	  }
	  aRxBuffer[0]=0;
 8000726:	2300      	movs	r3, #0
 8000728:	f887 3100 	strb.w	r3, [r7, #256]	; 0x100

	  cnt = TIM2 -> CNT;
 800072c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000732:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  cnt2 = TIM3 -> CNT;
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <main+0x1d8>)
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
//	  printf( "encoder = %d\r\n",count_total );
	  printf( "encoder = %d,%d\r\n",cnt,cnt2 );
 800073e:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8000742:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8000746:	480f      	ldr	r0, [pc, #60]	; (8000784 <main+0x1dc>)
 8000748:	f003 fbf6 	bl	8003f38 <iprintf>
	  HAL_Delay(100);
 800074c:	2064      	movs	r0, #100	; 0x64
 800074e:	f000 fe09 	bl	8001364 <HAL_Delay>
  {
 8000752:	e794      	b.n	800067e <main+0xd6>
 8000754:	080052c0 	.word	0x080052c0
 8000758:	080052d4 	.word	0x080052d4
 800075c:	2000020c 	.word	0x2000020c
 8000760:	20000124 	.word	0x20000124
 8000764:	200001c4 	.word	0x200001c4
 8000768:	200000dc 	.word	0x200000dc
 800076c:	40020400 	.word	0x40020400
 8000770:	2000016c 	.word	0x2000016c
 8000774:	0800528c 	.word	0x0800528c
 8000778:	08005290 	.word	0x08005290
 800077c:	0800529c 	.word	0x0800529c
 8000780:	40000400 	.word	0x40000400
 8000784:	080052ac 	.word	0x080052ac

08000788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b094      	sub	sp, #80	; 0x50
 800078c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2234      	movs	r2, #52	; 0x34
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f003 fbc6 	bl	8003f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
 80007aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b29      	ldr	r3, [pc, #164]	; (8000858 <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	4a28      	ldr	r2, [pc, #160]	; (8000858 <SystemClock_Config+0xd0>)
 80007b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ba:	6413      	str	r3, [r2, #64]	; 0x40
 80007bc:	4b26      	ldr	r3, [pc, #152]	; (8000858 <SystemClock_Config+0xd0>)
 80007be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007c8:	2300      	movs	r3, #0
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	4b23      	ldr	r3, [pc, #140]	; (800085c <SystemClock_Config+0xd4>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xd4>)
 80007d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xd4>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007fc:	2308      	movs	r3, #8
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000800:	2340      	movs	r3, #64	; 0x40
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fad3 	bl	8001dc0 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000820:	f000 fa74 	bl	8000d0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800083a:	f107 0308 	add.w	r3, r7, #8
 800083e:	2102      	movs	r1, #2
 8000840:	4618      	mov	r0, r3
 8000842:	f001 f847 	bl	80018d4 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800084c:	f000 fa5e 	bl	8000d0c <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3750      	adds	r7, #80	; 0x50
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_SPI1_Init+0x5c>)
 8000866:	4a16      	ldr	r2, [pc, #88]	; (80008c0 <MX_SPI1_Init+0x60>)
 8000868:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_SPI1_Init+0x5c>)
 800086c:	2200      	movs	r2, #0
 800086e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_SPI1_Init+0x5c>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_SPI1_Init+0x5c>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_SPI1_Init+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	; (80008bc <MX_SPI1_Init+0x5c>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <MX_SPI1_Init+0x5c>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088e:	4b0b      	ldr	r3, [pc, #44]	; (80008bc <MX_SPI1_Init+0x5c>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_SPI1_Init+0x5c>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_SPI1_Init+0x5c>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008a0:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_SPI1_Init+0x5c>)
 80008a2:	220a      	movs	r2, #10
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_SPI1_Init+0x5c>)
 80008a8:	f001 fd28 	bl	80022fc <HAL_SPI_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 80008b2:	f000 fa2b 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	2000016c 	.word	0x2000016c
 80008c0:	40013000 	.word	0x40013000

080008c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b096      	sub	sp, #88	; 0x58
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008dc:	2200      	movs	r2, #0
 80008de:	601a      	str	r2, [r3, #0]
 80008e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]
 80008f2:	615a      	str	r2, [r3, #20]
 80008f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2220      	movs	r2, #32
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f003 fb13 	bl	8003f28 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000902:	4b50      	ldr	r3, [pc, #320]	; (8000a44 <MX_TIM1_Init+0x180>)
 8000904:	4a50      	ldr	r2, [pc, #320]	; (8000a48 <MX_TIM1_Init+0x184>)
 8000906:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 8000908:	4b4e      	ldr	r3, [pc, #312]	; (8000a44 <MX_TIM1_Init+0x180>)
 800090a:	220a      	movs	r2, #10
 800090c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b4d      	ldr	r3, [pc, #308]	; (8000a44 <MX_TIM1_Init+0x180>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000914:	4b4b      	ldr	r3, [pc, #300]	; (8000a44 <MX_TIM1_Init+0x180>)
 8000916:	22ff      	movs	r2, #255	; 0xff
 8000918:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b4a      	ldr	r3, [pc, #296]	; (8000a44 <MX_TIM1_Init+0x180>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000920:	4b48      	ldr	r3, [pc, #288]	; (8000a44 <MX_TIM1_Init+0x180>)
 8000922:	2200      	movs	r2, #0
 8000924:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000926:	4b47      	ldr	r3, [pc, #284]	; (8000a44 <MX_TIM1_Init+0x180>)
 8000928:	2200      	movs	r2, #0
 800092a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800092c:	4845      	ldr	r0, [pc, #276]	; (8000a44 <MX_TIM1_Init+0x180>)
 800092e:	f001 ffdb 	bl	80028e8 <HAL_TIM_Base_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000938:	f000 f9e8 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000942:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000946:	4619      	mov	r1, r3
 8000948:	483e      	ldr	r0, [pc, #248]	; (8000a44 <MX_TIM1_Init+0x180>)
 800094a:	f002 fb2f 	bl	8002fac <HAL_TIM_ConfigClockSource>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000954:	f000 f9da 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <MX_TIM1_Init+0x180>)
 800095a:	f002 f814 	bl	8002986 <HAL_TIM_PWM_Init>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000964:	f000 f9d2 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000968:	2300      	movs	r3, #0
 800096a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000970:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000974:	4619      	mov	r1, r3
 8000976:	4833      	ldr	r0, [pc, #204]	; (8000a44 <MX_TIM1_Init+0x180>)
 8000978:	f002 feec 	bl	8003754 <HAL_TIMEx_MasterConfigSynchronization>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000982:	f000 f9c3 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000986:	2360      	movs	r3, #96	; 0x60
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000996:	2300      	movs	r3, #0
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800099a:	2300      	movs	r3, #0
 800099c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	2200      	movs	r2, #0
 80009a8:	4619      	mov	r1, r3
 80009aa:	4826      	ldr	r0, [pc, #152]	; (8000a44 <MX_TIM1_Init+0x180>)
 80009ac:	f002 fa40 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80009b6:	f000 f9a9 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009be:	2204      	movs	r2, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4820      	ldr	r0, [pc, #128]	; (8000a44 <MX_TIM1_Init+0x180>)
 80009c4:	f002 fa34 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80009ce:	f000 f99d 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d6:	2208      	movs	r2, #8
 80009d8:	4619      	mov	r1, r3
 80009da:	481a      	ldr	r0, [pc, #104]	; (8000a44 <MX_TIM1_Init+0x180>)
 80009dc:	f002 fa28 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80009e6:	f000 f991 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ee:	220c      	movs	r2, #12
 80009f0:	4619      	mov	r1, r3
 80009f2:	4814      	ldr	r0, [pc, #80]	; (8000a44 <MX_TIM1_Init+0x180>)
 80009f4:	f002 fa1c 	bl	8002e30 <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 80009fe:	f000 f985 	bl	8000d0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	4619      	mov	r1, r3
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <MX_TIM1_Init+0x180>)
 8000a26:	f002 ff11 	bl	800384c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000a30:	f000 f96c 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <MX_TIM1_Init+0x180>)
 8000a36:	f000 fa7d 	bl	8000f34 <HAL_TIM_MspPostInit>

}
 8000a3a:	bf00      	nop
 8000a3c:	3758      	adds	r7, #88	; 0x58
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000124 	.word	0x20000124
 8000a48:	40010000 	.word	0x40010000

08000a4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	; 0x30
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2224      	movs	r2, #36	; 0x24
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f003 fa64 	bl	8003f28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a68:	4b21      	ldr	r3, [pc, #132]	; (8000af0 <MX_TIM2_Init+0xa4>)
 8000a6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_TIM2_Init+0xa4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <MX_TIM2_Init+0xa4>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_TIM2_Init+0xa4>)
 8000a7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_TIM2_Init+0xa4>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_TIM2_Init+0xa4>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ab4:	f107 030c 	add.w	r3, r7, #12
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480d      	ldr	r0, [pc, #52]	; (8000af0 <MX_TIM2_Init+0xa4>)
 8000abc:	f002 f884 	bl	8002bc8 <HAL_TIM_Encoder_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ac6:	f000 f921 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_TIM2_Init+0xa4>)
 8000ad8:	f002 fe3c 	bl	8003754 <HAL_TIMEx_MasterConfigSynchronization>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ae2:	f000 f913 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3730      	adds	r7, #48	; 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200001c4 	.word	0x200001c4

08000af4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08c      	sub	sp, #48	; 0x30
 8000af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000afa:	f107 030c 	add.w	r3, r7, #12
 8000afe:	2224      	movs	r2, #36	; 0x24
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f003 fa10 	bl	8003f28 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b10:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <MX_TIM3_Init+0xa0>)
 8000b12:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <MX_TIM3_Init+0xa4>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b16:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <MX_TIM3_Init+0xa0>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <MX_TIM3_Init+0xa0>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b22:	4b1c      	ldr	r3, [pc, #112]	; (8000b94 <MX_TIM3_Init+0xa0>)
 8000b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	; (8000b94 <MX_TIM3_Init+0xa0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b30:	4b18      	ldr	r3, [pc, #96]	; (8000b94 <MX_TIM3_Init+0xa0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <MX_TIM3_Init+0xa0>)
 8000b62:	f002 f831 	bl	8002bc8 <HAL_TIM_Encoder_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000b6c:	f000 f8ce 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_TIM3_Init+0xa0>)
 8000b7e:	f002 fde9 	bl	8003754 <HAL_TIMEx_MasterConfigSynchronization>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000b88:	f000 f8c0 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	3730      	adds	r7, #48	; 0x30
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000dc 	.word	0x200000dc
 8000b98:	40000400 	.word	0x40000400

08000b9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba2:	4a12      	ldr	r2, [pc, #72]	; (8000bec <MX_USART2_UART_Init+0x50>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba6:	4b10      	ldr	r3, [pc, #64]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4805      	ldr	r0, [pc, #20]	; (8000be8 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f002 fe8c 	bl	80038f0 <HAL_UART_Init>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bde:	f000 f895 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2000020c 	.word	0x2000020c
 8000bec:	40004400 	.word	0x40004400

08000bf0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_USART3_UART_Init+0x48>)
 8000bf6:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <MX_USART3_UART_Init+0x4c>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1500000;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_USART3_UART_Init+0x48>)
 8000bfc:	4a10      	ldr	r2, [pc, #64]	; (8000c40 <MX_USART3_UART_Init+0x50>)
 8000bfe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_USART3_UART_Init+0x48>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_USART3_UART_Init+0x48>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_USART3_UART_Init+0x48>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_USART3_UART_Init+0x48>)
 8000c14:	220c      	movs	r2, #12
 8000c16:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_USART3_UART_Init+0x48>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_USART3_UART_Init+0x48>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_USART3_UART_Init+0x48>)
 8000c26:	f002 fe63 	bl	80038f0 <HAL_UART_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8000c30:	f000 f86c 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000098 	.word	0x20000098
 8000c3c:	40004800 	.word	0x40004800
 8000c40:	0016e360 	.word	0x0016e360

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_GPIO_Init+0x98>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <MX_GPIO_Init+0x98>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_GPIO_Init+0x98>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60bb      	str	r3, [r7, #8]
 8000c74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_GPIO_Init+0x98>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a17      	ldr	r2, [pc, #92]	; (8000cdc <MX_GPIO_Init+0x98>)
 8000c80:	f043 0302 	orr.w	r3, r3, #2
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <MX_GPIO_Init+0x98>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_GPIO_Init+0x98>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <MX_GPIO_Init+0x98>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_GPIO_Init+0x98>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	603b      	str	r3, [r7, #0]
 8000cac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, motor1_EN_Pin|motor2_EN_Pin|B3M_EN_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2107      	movs	r1, #7
 8000cb2:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <MX_GPIO_Init+0x9c>)
 8000cb4:	f000 fdf4 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : motor1_EN_Pin motor2_EN_Pin B3M_EN_Pin */
  GPIO_InitStruct.Pin = motor1_EN_Pin|motor2_EN_Pin|B3M_EN_Pin;
 8000cb8:	2307      	movs	r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4804      	ldr	r0, [pc, #16]	; (8000ce0 <MX_GPIO_Init+0x9c>)
 8000cd0:	f000 fc52 	bl	8001578 <HAL_GPIO_Init>

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020400 	.word	0x40020400

08000ce4 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	230a      	movs	r3, #10
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	4803      	ldr	r0, [pc, #12]	; (8000d08 <_write+0x24>)
 8000cfa:	f002 fe46 	bl	800398a <HAL_UART_Transmit>
  return len;
 8000cfe:	687b      	ldr	r3, [r7, #4]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000020c 	.word	0x2000020c

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a19      	ldr	r2, [pc, #100]	; (8000dec <HAL_SPI_MspInit+0x84>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d12b      	bne.n	8000de2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_SPI_MspInit+0x88>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_SPI_MspInit+0x88>)
 8000d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_SPI_MspInit+0x88>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_SPI_MspInit+0x88>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <HAL_SPI_MspInit+0x88>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_SPI_MspInit+0x88>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000dc2:	23f0      	movs	r3, #240	; 0xf0
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4805      	ldr	r0, [pc, #20]	; (8000df4 <HAL_SPI_MspInit+0x8c>)
 8000dde:	f000 fbcb 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3728      	adds	r7, #40	; 0x28
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40013000 	.word	0x40013000
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000

08000df8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_TIM_Base_MspInit+0x3c>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d10d      	bne.n	8000e26 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_TIM_Base_MspInit+0x40>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a09      	ldr	r2, [pc, #36]	; (8000e38 <HAL_TIM_Base_MspInit+0x40>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <HAL_TIM_Base_MspInit+0x40>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40010000 	.word	0x40010000
 8000e38:	40023800 	.word	0x40023800

08000e3c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08c      	sub	sp, #48	; 0x30
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e5c:	d12c      	bne.n	8000eb8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	61bb      	str	r3, [r7, #24]
 8000e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000e84:	f043 0301 	orr.w	r3, r3, #1
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0301 	and.w	r3, r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e96:	2303      	movs	r3, #3
 8000e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481d      	ldr	r0, [pc, #116]	; (8000f28 <HAL_TIM_Encoder_MspInit+0xec>)
 8000eb2:	f000 fb61 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eb6:	e030      	b.n	8000f1a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a1b      	ldr	r2, [pc, #108]	; (8000f2c <HAL_TIM_Encoder_MspInit+0xf0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d12b      	bne.n	8000f1a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ee8:	f043 0304 	orr.w	r3, r3, #4
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0304 	and.w	r3, r3, #4
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000efa:	23c0      	movs	r3, #192	; 0xc0
 8000efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <HAL_TIM_Encoder_MspInit+0xf4>)
 8000f16:	f000 fb2f 	bl	8001578 <HAL_GPIO_Init>
}
 8000f1a:	bf00      	nop
 8000f1c:	3730      	adds	r7, #48	; 0x30
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40000400 	.word	0x40000400
 8000f30:	40020800 	.word	0x40020800

08000f34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_TIM_MspPostInit+0x68>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d11e      	bne.n	8000f94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <HAL_TIM_MspPostInit+0x6c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <HAL_TIM_MspPostInit+0x6c>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b0e      	ldr	r3, [pc, #56]	; (8000fa0 <HAL_TIM_MspPostInit+0x6c>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f72:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_TIM_MspPostInit+0x70>)
 8000f90:	f000 faf2 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	40023800 	.word	0x40023800
 8000fa4:	40020000 	.word	0x40020000

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	; 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a32      	ldr	r2, [pc, #200]	; (8001090 <HAL_UART_MspInit+0xe8>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d12c      	bne.n	8001024 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
 8000fce:	4b31      	ldr	r3, [pc, #196]	; (8001094 <HAL_UART_MspInit+0xec>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a30      	ldr	r2, [pc, #192]	; (8001094 <HAL_UART_MspInit+0xec>)
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b2e      	ldr	r3, [pc, #184]	; (8001094 <HAL_UART_MspInit+0xec>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe2:	61bb      	str	r3, [r7, #24]
 8000fe4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_UART_MspInit+0xec>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a29      	ldr	r2, [pc, #164]	; (8001094 <HAL_UART_MspInit+0xec>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b27      	ldr	r3, [pc, #156]	; (8001094 <HAL_UART_MspInit+0xec>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001002:	230c      	movs	r3, #12
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001012:	2307      	movs	r3, #7
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001016:	f107 031c 	add.w	r3, r7, #28
 800101a:	4619      	mov	r1, r3
 800101c:	481e      	ldr	r0, [pc, #120]	; (8001098 <HAL_UART_MspInit+0xf0>)
 800101e:	f000 faab 	bl	8001578 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001022:	e031      	b.n	8001088 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a1c      	ldr	r2, [pc, #112]	; (800109c <HAL_UART_MspInit+0xf4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12c      	bne.n	8001088 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UART_MspInit+0xec>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_UART_MspInit+0xec>)
 8001038:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UART_MspInit+0xec>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_UART_MspInit+0xec>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_UART_MspInit+0xec>)
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_UART_MspInit+0xec>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0304 	and.w	r3, r3, #4
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001066:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800106a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106c:	2302      	movs	r3, #2
 800106e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001078:	2307      	movs	r3, #7
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <HAL_UART_MspInit+0xf8>)
 8001084:	f000 fa78 	bl	8001578 <HAL_GPIO_Init>
}
 8001088:	bf00      	nop
 800108a:	3730      	adds	r7, #48	; 0x30
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40004400 	.word	0x40004400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000
 800109c:	40004800 	.word	0x40004800
 80010a0:	40020800 	.word	0x40020800

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f0:	f000 f918 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	e00a      	b.n	8001120 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800110a:	f3af 8000 	nop.w
 800110e:	4601      	mov	r1, r0
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1c5a      	adds	r2, r3, #1
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	b2ca      	uxtb	r2, r1
 8001118:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	dbf0      	blt.n	800110a <_read+0x12>
	}

return len;
 8001128:	687b      	ldr	r3, [r7, #4]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
	return -1;
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
 8001152:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800115a:	605a      	str	r2, [r3, #4]
	return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr

0800116a <_isatty>:

int _isatty(int file)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	return 1;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
	return 0;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011a4:	4a14      	ldr	r2, [pc, #80]	; (80011f8 <_sbrk+0x5c>)
 80011a6:	4b15      	ldr	r3, [pc, #84]	; (80011fc <_sbrk+0x60>)
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d102      	bne.n	80011be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <_sbrk+0x64>)
 80011ba:	4a12      	ldr	r2, [pc, #72]	; (8001204 <_sbrk+0x68>)
 80011bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d207      	bcs.n	80011dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011cc:	f002 fe82 	bl	8003ed4 <__errno>
 80011d0:	4603      	mov	r3, r0
 80011d2:	220c      	movs	r2, #12
 80011d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	e009      	b.n	80011f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <_sbrk+0x64>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011e2:	4b07      	ldr	r3, [pc, #28]	; (8001200 <_sbrk+0x64>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4413      	add	r3, r2
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <_sbrk+0x64>)
 80011ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ee:	68fb      	ldr	r3, [r7, #12]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20020000 	.word	0x20020000
 80011fc:	00000400 	.word	0x00000400
 8001200:	2000008c 	.word	0x2000008c
 8001204:	20000268 	.word	0x20000268

08001208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800122c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001264 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001232:	490e      	ldr	r1, [pc, #56]	; (800126c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001248:	4c0b      	ldr	r4, [pc, #44]	; (8001278 <LoopFillZerobss+0x26>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001256:	f7ff ffd7 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f002 fe41 	bl	8003ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800125e:	f7ff f9a3 	bl	80005a8 <main>
  bx  lr    
 8001262:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001270:	08005398 	.word	0x08005398
  ldr r2, =_sbss
 8001274:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001278:	20000264 	.word	0x20000264

0800127c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001284:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <HAL_Init+0x40>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a0d      	ldr	r2, [pc, #52]	; (80012c0 <HAL_Init+0x40>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800128e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001290:	4b0b      	ldr	r3, [pc, #44]	; (80012c0 <HAL_Init+0x40>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <HAL_Init+0x40>)
 8001296:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800129a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_Init+0x40>)
 80012a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f931 	bl	8001510 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f000 f808 	bl	80012c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fd30 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023c00 	.word	0x40023c00

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x54>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f93b 	bl	800155e <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f000 f911 	bl	8001526 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_InitTick+0x5c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000000 	.word	0x20000000
 800131c:	20000008 	.word	0x20000008
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_IncTick+0x20>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <HAL_IncTick+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a04      	ldr	r2, [pc, #16]	; (8001348 <HAL_IncTick+0x24>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008
 8001348:	20000250 	.word	0x20000250

0800134c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  return uwTick;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <HAL_GetTick+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000250 	.word	0x20000250

08001364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff ffee 	bl	800134c <HAL_GetTick>
 8001370:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d005      	beq.n	800138a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800137e:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_Delay+0x44>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4413      	add	r3, r2
 8001388:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800138a:	bf00      	nop
 800138c:	f7ff ffde 	bl	800134c <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	429a      	cmp	r2, r3
 800139a:	d8f7      	bhi.n	800138c <HAL_Delay+0x28>
  {
  }
}
 800139c:	bf00      	nop
 800139e:	bf00      	nop
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000008 	.word	0x20000008

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014dc:	d301      	bcc.n	80014e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014de:	2301      	movs	r3, #1
 80014e0:	e00f      	b.n	8001502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <SysTick_Config+0x40>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3b01      	subs	r3, #1
 80014e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ea:	210f      	movs	r1, #15
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f7ff ff8e 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f4:	4b05      	ldr	r3, [pc, #20]	; (800150c <SysTick_Config+0x40>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fa:	4b04      	ldr	r3, [pc, #16]	; (800150c <SysTick_Config+0x40>)
 80014fc:	2207      	movs	r2, #7
 80014fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	e000e010 	.word	0xe000e010

08001510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f7ff ff47 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001526:	b580      	push	{r7, lr}
 8001528:	b086      	sub	sp, #24
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff5c 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff8e 	bl	8001464 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5d 	bl	8001410 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffb0 	bl	80014cc <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	e165      	b.n	8001860 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001594:	2201      	movs	r2, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	f040 8154 	bne.w	800185a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d005      	beq.n	80015ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d130      	bne.n	800162c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	2203      	movs	r2, #3
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	43db      	mvns	r3, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4013      	ands	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001600:	2201      	movs	r2, #1
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4013      	ands	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	091b      	lsrs	r3, r3, #4
 8001616:	f003 0201 	and.w	r2, r3, #1
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4313      	orrs	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b03      	cmp	r3, #3
 8001636:	d017      	beq.n	8001668 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d123      	bne.n	80016bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	4013      	ands	r3, r2
 8001696:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	69b9      	ldr	r1, [r7, #24]
 80016b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0203 	and.w	r2, r3, #3
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80ae 	beq.w	800185a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <HAL_GPIO_Init+0x300>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	4a5c      	ldr	r2, [pc, #368]	; (8001878 <HAL_GPIO_Init+0x300>)
 8001708:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800170c:	6453      	str	r3, [r2, #68]	; 0x44
 800170e:	4b5a      	ldr	r3, [pc, #360]	; (8001878 <HAL_GPIO_Init+0x300>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800171a:	4a58      	ldr	r2, [pc, #352]	; (800187c <HAL_GPIO_Init+0x304>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001726:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	4013      	ands	r3, r2
 800173c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4f      	ldr	r2, [pc, #316]	; (8001880 <HAL_GPIO_Init+0x308>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d025      	beq.n	8001792 <HAL_GPIO_Init+0x21a>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <HAL_GPIO_Init+0x30c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d01f      	beq.n	800178e <HAL_GPIO_Init+0x216>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <HAL_GPIO_Init+0x310>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d019      	beq.n	800178a <HAL_GPIO_Init+0x212>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4c      	ldr	r2, [pc, #304]	; (800188c <HAL_GPIO_Init+0x314>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d013      	beq.n	8001786 <HAL_GPIO_Init+0x20e>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a4b      	ldr	r2, [pc, #300]	; (8001890 <HAL_GPIO_Init+0x318>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d00d      	beq.n	8001782 <HAL_GPIO_Init+0x20a>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4a4a      	ldr	r2, [pc, #296]	; (8001894 <HAL_GPIO_Init+0x31c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d007      	beq.n	800177e <HAL_GPIO_Init+0x206>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a49      	ldr	r2, [pc, #292]	; (8001898 <HAL_GPIO_Init+0x320>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_GPIO_Init+0x202>
 8001776:	2306      	movs	r3, #6
 8001778:	e00c      	b.n	8001794 <HAL_GPIO_Init+0x21c>
 800177a:	2307      	movs	r3, #7
 800177c:	e00a      	b.n	8001794 <HAL_GPIO_Init+0x21c>
 800177e:	2305      	movs	r3, #5
 8001780:	e008      	b.n	8001794 <HAL_GPIO_Init+0x21c>
 8001782:	2304      	movs	r3, #4
 8001784:	e006      	b.n	8001794 <HAL_GPIO_Init+0x21c>
 8001786:	2303      	movs	r3, #3
 8001788:	e004      	b.n	8001794 <HAL_GPIO_Init+0x21c>
 800178a:	2302      	movs	r3, #2
 800178c:	e002      	b.n	8001794 <HAL_GPIO_Init+0x21c>
 800178e:	2301      	movs	r3, #1
 8001790:	e000      	b.n	8001794 <HAL_GPIO_Init+0x21c>
 8001792:	2300      	movs	r3, #0
 8001794:	69fa      	ldr	r2, [r7, #28]
 8001796:	f002 0203 	and.w	r2, r2, #3
 800179a:	0092      	lsls	r2, r2, #2
 800179c:	4093      	lsls	r3, r2
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017a4:	4935      	ldr	r1, [pc, #212]	; (800187c <HAL_GPIO_Init+0x304>)
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3302      	adds	r3, #2
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b2:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_GPIO_Init+0x324>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d6:	4a31      	ldr	r2, [pc, #196]	; (800189c <HAL_GPIO_Init+0x324>)
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80017dc:	4b2f      	ldr	r3, [pc, #188]	; (800189c <HAL_GPIO_Init+0x324>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	43db      	mvns	r3, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4013      	ands	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001800:	4a26      	ldr	r2, [pc, #152]	; (800189c <HAL_GPIO_Init+0x324>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_GPIO_Init+0x324>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	43db      	mvns	r3, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4013      	ands	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800182a:	4a1c      	ldr	r2, [pc, #112]	; (800189c <HAL_GPIO_Init+0x324>)
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_GPIO_Init+0x324>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001854:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_GPIO_Init+0x324>)
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3301      	adds	r3, #1
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	2b0f      	cmp	r3, #15
 8001864:	f67f ae96 	bls.w	8001594 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3724      	adds	r7, #36	; 0x24
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40013800 	.word	0x40013800
 8001880:	40020000 	.word	0x40020000
 8001884:	40020400 	.word	0x40020400
 8001888:	40020800 	.word	0x40020800
 800188c:	40020c00 	.word	0x40020c00
 8001890:	40021000 	.word	0x40021000
 8001894:	40021400 	.word	0x40021400
 8001898:	40021800 	.word	0x40021800
 800189c:	40013c00 	.word	0x40013c00

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018bc:	e003      	b.n	80018c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	041a      	lsls	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	619a      	str	r2, [r3, #24]
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
	...

080018d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0cc      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018e8:	4b68      	ldr	r3, [pc, #416]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 030f 	and.w	r3, r3, #15
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d90c      	bls.n	8001910 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018f6:	4b65      	ldr	r3, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001932:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800194a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d044      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d119      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d003      	beq.n	8001992 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800198e:	2b03      	cmp	r3, #3
 8001990:	d107      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e067      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b2:	4b37      	ldr	r3, [pc, #220]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f023 0203 	bic.w	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4934      	ldr	r1, [pc, #208]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c4:	f7ff fcc2 	bl	800134c <HAL_GetTick>
 80019c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ca:	e00a      	b.n	80019e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019cc:	f7ff fcbe 	bl	800134c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019da:	4293      	cmp	r3, r2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e04f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 020c 	and.w	r2, r3, #12
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d1eb      	bne.n	80019cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019f4:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 030f 	and.w	r3, r3, #15
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d20c      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x1b8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f855 	bl	8001b08 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6c:	5ccb      	ldrb	r3, [r1, r3]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1c4>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff fc22 	bl	80012c4 <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023c00 	.word	0x40023c00
 8001a90:	40023800 	.word	0x40023800
 8001a94:	080052d8 	.word	0x080052d8
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000000 	.word	0x20000000

08001ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001abc:	f7ff fff0 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0a9b      	lsrs	r3, r3, #10
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	; (8001adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	080052e8 	.word	0x080052e8

08001ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ae4:	f7ff ffdc 	bl	8001aa0 <HAL_RCC_GetHCLKFreq>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	0b5b      	lsrs	r3, r3, #13
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	4903      	ldr	r1, [pc, #12]	; (8001b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001af6:	5ccb      	ldrb	r3, [r1, r3]
 8001af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40023800 	.word	0x40023800
 8001b04:	080052e8 	.word	0x080052e8

08001b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b0c:	b087      	sub	sp, #28
 8001b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b10:	2600      	movs	r6, #0
 8001b12:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8001b14:	2600      	movs	r6, #0
 8001b16:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001b18:	2600      	movs	r6, #0
 8001b1a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b20:	2600      	movs	r6, #0
 8001b22:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b24:	4ea3      	ldr	r6, [pc, #652]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b26:	68b6      	ldr	r6, [r6, #8]
 8001b28:	f006 060c 	and.w	r6, r6, #12
 8001b2c:	2e0c      	cmp	r6, #12
 8001b2e:	f200 8137 	bhi.w	8001da0 <HAL_RCC_GetSysClockFreq+0x298>
 8001b32:	f20f 0c08 	addw	ip, pc, #8
 8001b36:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001b3a:	bf00      	nop
 8001b3c:	08001b71 	.word	0x08001b71
 8001b40:	08001da1 	.word	0x08001da1
 8001b44:	08001da1 	.word	0x08001da1
 8001b48:	08001da1 	.word	0x08001da1
 8001b4c:	08001b77 	.word	0x08001b77
 8001b50:	08001da1 	.word	0x08001da1
 8001b54:	08001da1 	.word	0x08001da1
 8001b58:	08001da1 	.word	0x08001da1
 8001b5c:	08001b7d 	.word	0x08001b7d
 8001b60:	08001da1 	.word	0x08001da1
 8001b64:	08001da1 	.word	0x08001da1
 8001b68:	08001da1 	.word	0x08001da1
 8001b6c:	08001c93 	.word	0x08001c93
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b70:	4b91      	ldr	r3, [pc, #580]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001b72:	613b      	str	r3, [r7, #16]
       break;
 8001b74:	e117      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b76:	4b91      	ldr	r3, [pc, #580]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001b78:	613b      	str	r3, [r7, #16]
      break;
 8001b7a:	e114      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b7c:	4b8d      	ldr	r3, [pc, #564]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b84:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b86:	4b8b      	ldr	r3, [pc, #556]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d024      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	099b      	lsrs	r3, r3, #6
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f04f 0300 	mov.w	r3, #0
 8001b9e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001ba2:	f04f 0500 	mov.w	r5, #0
 8001ba6:	ea02 0004 	and.w	r0, r2, r4
 8001baa:	ea03 0105 	and.w	r1, r3, r5
 8001bae:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001bb0:	fb03 f201 	mul.w	r2, r3, r1
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	fb03 f300 	mul.w	r3, r3, r0
 8001bba:	4413      	add	r3, r2
 8001bbc:	4a7f      	ldr	r2, [pc, #508]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001bbe:	fba0 0102 	umull	r0, r1, r0, r2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	f04f 0300 	mov.w	r3, #0
 8001bce:	f7fe fb6f 	bl	80002b0 <__aeabi_uldivmod>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	e04c      	b.n	8001c76 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bdc:	4b75      	ldr	r3, [pc, #468]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	099b      	lsrs	r3, r3, #6
 8001be2:	461a      	mov	r2, r3
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bec:	f04f 0100 	mov.w	r1, #0
 8001bf0:	ea02 0800 	and.w	r8, r2, r0
 8001bf4:	ea03 0901 	and.w	r9, r3, r1
 8001bf8:	4640      	mov	r0, r8
 8001bfa:	4649      	mov	r1, r9
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	014b      	lsls	r3, r1, #5
 8001c06:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c0a:	0142      	lsls	r2, r0, #5
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	ebb0 0008 	subs.w	r0, r0, r8
 8001c14:	eb61 0109 	sbc.w	r1, r1, r9
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	f04f 0300 	mov.w	r3, #0
 8001c20:	018b      	lsls	r3, r1, #6
 8001c22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c26:	0182      	lsls	r2, r0, #6
 8001c28:	1a12      	subs	r2, r2, r0
 8001c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	00d9      	lsls	r1, r3, #3
 8001c38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c3c:	00d0      	lsls	r0, r2, #3
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	eb12 0208 	adds.w	r2, r2, r8
 8001c46:	eb43 0309 	adc.w	r3, r3, r9
 8001c4a:	f04f 0000 	mov.w	r0, #0
 8001c4e:	f04f 0100 	mov.w	r1, #0
 8001c52:	0299      	lsls	r1, r3, #10
 8001c54:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c58:	0290      	lsls	r0, r2, #10
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4610      	mov	r0, r2
 8001c60:	4619      	mov	r1, r3
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	461a      	mov	r2, r3
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	f7fe fb21 	bl	80002b0 <__aeabi_uldivmod>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4613      	mov	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c76:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	0c1b      	lsrs	r3, r3, #16
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	3301      	adds	r3, #1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	613b      	str	r3, [r7, #16]
      break;
 8001c90:	e089      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c92:	4948      	ldr	r1, [pc, #288]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c94:	6849      	ldr	r1, [r1, #4]
 8001c96:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001c9a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c9c:	4945      	ldr	r1, [pc, #276]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001c9e:	6849      	ldr	r1, [r1, #4]
 8001ca0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	d024      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca8:	4942      	ldr	r1, [pc, #264]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001caa:	6849      	ldr	r1, [r1, #4]
 8001cac:	0989      	lsrs	r1, r1, #6
 8001cae:	4608      	mov	r0, r1
 8001cb0:	f04f 0100 	mov.w	r1, #0
 8001cb4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001cb8:	f04f 0500 	mov.w	r5, #0
 8001cbc:	ea00 0204 	and.w	r2, r0, r4
 8001cc0:	ea01 0305 	and.w	r3, r1, r5
 8001cc4:	493d      	ldr	r1, [pc, #244]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001cc6:	fb01 f003 	mul.w	r0, r1, r3
 8001cca:	2100      	movs	r1, #0
 8001ccc:	fb01 f102 	mul.w	r1, r1, r2
 8001cd0:	1844      	adds	r4, r0, r1
 8001cd2:	493a      	ldr	r1, [pc, #232]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001cd4:	fba2 0101 	umull	r0, r1, r2, r1
 8001cd8:	1863      	adds	r3, r4, r1
 8001cda:	4619      	mov	r1, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	f7fe fae4 	bl	80002b0 <__aeabi_uldivmod>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4613      	mov	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	e04a      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cf2:	4b30      	ldr	r3, [pc, #192]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	099b      	lsrs	r3, r3, #6
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f04f 0300 	mov.w	r3, #0
 8001cfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d02:	f04f 0100 	mov.w	r1, #0
 8001d06:	ea02 0400 	and.w	r4, r2, r0
 8001d0a:	ea03 0501 	and.w	r5, r3, r1
 8001d0e:	4620      	mov	r0, r4
 8001d10:	4629      	mov	r1, r5
 8001d12:	f04f 0200 	mov.w	r2, #0
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	014b      	lsls	r3, r1, #5
 8001d1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d20:	0142      	lsls	r2, r0, #5
 8001d22:	4610      	mov	r0, r2
 8001d24:	4619      	mov	r1, r3
 8001d26:	1b00      	subs	r0, r0, r4
 8001d28:	eb61 0105 	sbc.w	r1, r1, r5
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	018b      	lsls	r3, r1, #6
 8001d36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d3a:	0182      	lsls	r2, r0, #6
 8001d3c:	1a12      	subs	r2, r2, r0
 8001d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d42:	f04f 0000 	mov.w	r0, #0
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	00d9      	lsls	r1, r3, #3
 8001d4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d50:	00d0      	lsls	r0, r2, #3
 8001d52:	4602      	mov	r2, r0
 8001d54:	460b      	mov	r3, r1
 8001d56:	1912      	adds	r2, r2, r4
 8001d58:	eb45 0303 	adc.w	r3, r5, r3
 8001d5c:	f04f 0000 	mov.w	r0, #0
 8001d60:	f04f 0100 	mov.w	r1, #0
 8001d64:	0299      	lsls	r1, r3, #10
 8001d66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001d6a:	0290      	lsls	r0, r2, #10
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	461a      	mov	r2, r3
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	f7fe fa98 	bl	80002b0 <__aeabi_uldivmod>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	4613      	mov	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	0f1b      	lsrs	r3, r3, #28
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	613b      	str	r3, [r7, #16]
      break;
 8001d9e:	e002      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da0:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8001da2:	613b      	str	r3, [r7, #16]
      break;
 8001da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da6:	693b      	ldr	r3, [r7, #16]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	017d7840 	.word	0x017d7840

08001dc0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e28d      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 8083 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001de0:	4b94      	ldr	r3, [pc, #592]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f003 030c 	and.w	r3, r3, #12
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d019      	beq.n	8001e20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001dec:	4b91      	ldr	r3, [pc, #580]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	d106      	bne.n	8001e06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001df8:	4b8e      	ldr	r3, [pc, #568]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e04:	d00c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e06:	4b8b      	ldr	r3, [pc, #556]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001e0e:	2b0c      	cmp	r3, #12
 8001e10:	d112      	bne.n	8001e38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e12:	4b88      	ldr	r3, [pc, #544]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e1e:	d10b      	bne.n	8001e38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e20:	4b84      	ldr	r3, [pc, #528]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d05b      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x124>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d157      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e25a      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e40:	d106      	bne.n	8001e50 <HAL_RCC_OscConfig+0x90>
 8001e42:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7b      	ldr	r2, [pc, #492]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	e01d      	b.n	8001e8c <HAL_RCC_OscConfig+0xcc>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0xb4>
 8001e5a:	4b76      	ldr	r3, [pc, #472]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a75      	ldr	r2, [pc, #468]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a72      	ldr	r2, [pc, #456]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0xcc>
 8001e74:	4b6f      	ldr	r3, [pc, #444]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a6e      	ldr	r2, [pc, #440]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b6c      	ldr	r3, [pc, #432]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a6b      	ldr	r2, [pc, #428]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fa5a 	bl	800134c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff fa56 	bl	800134c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e21f      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b61      	ldr	r3, [pc, #388]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0xdc>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fa46 	bl	800134c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fa42 	bl	800134c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e20b      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ed6:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x104>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d06f      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001ef2:	4b50      	ldr	r3, [pc, #320]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d017      	beq.n	8001f2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001efe:	4b4d      	ldr	r3, [pc, #308]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d105      	bne.n	8001f16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f0a:	4b4a      	ldr	r3, [pc, #296]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f16:	4b47      	ldr	r3, [pc, #284]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d11c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f22:	4b44      	ldr	r3, [pc, #272]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d116      	bne.n	8001f5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d005      	beq.n	8001f46 <HAL_RCC_OscConfig+0x186>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e1d3      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	4b3b      	ldr	r3, [pc, #236]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4937      	ldr	r1, [pc, #220]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	e03a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d020      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f64:	4b34      	ldr	r3, [pc, #208]	; (8002038 <HAL_RCC_OscConfig+0x278>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f9ef 	bl	800134c <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f72:	f7ff f9eb 	bl	800134c <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1b4      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	691b      	ldr	r3, [r3, #16]
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4925      	ldr	r1, [pc, #148]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e015      	b.n	8001fd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_RCC_OscConfig+0x278>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f9ce 	bl	800134c <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fb4:	f7ff f9ca 	bl	800134c <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e193      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d036      	beq.n	800204c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d016      	beq.n	8002014 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_RCC_OscConfig+0x27c>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fec:	f7ff f9ae 	bl	800134c <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff4:	f7ff f9aa 	bl	800134c <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e173      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_OscConfig+0x274>)
 8002008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d0f0      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x234>
 8002012:	e01b      	b.n	800204c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002014:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_RCC_OscConfig+0x27c>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7ff f997 	bl	800134c <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002020:	e00e      	b.n	8002040 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002022:	f7ff f993 	bl	800134c <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d907      	bls.n	8002040 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e15c      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
 8002034:	40023800 	.word	0x40023800
 8002038:	42470000 	.word	0x42470000
 800203c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002040:	4b8a      	ldr	r3, [pc, #552]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ea      	bne.n	8002022 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8097 	beq.w	8002188 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800205a:	2300      	movs	r3, #0
 800205c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800205e:	4b83      	ldr	r3, [pc, #524]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10f      	bne.n	800208a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	4b7f      	ldr	r3, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	4a7e      	ldr	r2, [pc, #504]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	6413      	str	r3, [r2, #64]	; 0x40
 800207a:	4b7c      	ldr	r3, [pc, #496]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	2301      	movs	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b79      	ldr	r3, [pc, #484]	; (8002270 <HAL_RCC_OscConfig+0x4b0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002096:	4b76      	ldr	r3, [pc, #472]	; (8002270 <HAL_RCC_OscConfig+0x4b0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a75      	ldr	r2, [pc, #468]	; (8002270 <HAL_RCC_OscConfig+0x4b0>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7ff f953 	bl	800134c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7ff f94f 	bl	800134c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e118      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b6c      	ldr	r3, [pc, #432]	; (8002270 <HAL_RCC_OscConfig+0x4b0>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d106      	bne.n	80020de <HAL_RCC_OscConfig+0x31e>
 80020d0:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020d4:	4a65      	ldr	r2, [pc, #404]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6713      	str	r3, [r2, #112]	; 0x70
 80020dc:	e01c      	b.n	8002118 <HAL_RCC_OscConfig+0x358>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0x340>
 80020e6:	4b61      	ldr	r3, [pc, #388]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	4a60      	ldr	r2, [pc, #384]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	6713      	str	r3, [r2, #112]	; 0x70
 80020f2:	4b5e      	ldr	r3, [pc, #376]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 80020f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f6:	4a5d      	ldr	r2, [pc, #372]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6713      	str	r3, [r2, #112]	; 0x70
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0x358>
 8002100:	4b5a      	ldr	r3, [pc, #360]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002104:	4a59      	ldr	r2, [pc, #356]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002106:	f023 0301 	bic.w	r3, r3, #1
 800210a:	6713      	str	r3, [r2, #112]	; 0x70
 800210c:	4b57      	ldr	r3, [pc, #348]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 800210e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002110:	4a56      	ldr	r2, [pc, #344]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002112:	f023 0304 	bic.w	r3, r3, #4
 8002116:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d015      	beq.n	800214c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002120:	f7ff f914 	bl	800134c <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002126:	e00a      	b.n	800213e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002128:	f7ff f910 	bl	800134c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	f241 3288 	movw	r2, #5000	; 0x1388
 8002136:	4293      	cmp	r3, r2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e0d7      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	4b4b      	ldr	r3, [pc, #300]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0ee      	beq.n	8002128 <HAL_RCC_OscConfig+0x368>
 800214a:	e014      	b.n	8002176 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff f8fe 	bl	800134c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7ff f8fa 	bl	800134c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0c1      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216a:	4b40      	ldr	r3, [pc, #256]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1ee      	bne.n	8002154 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002176:	7dfb      	ldrb	r3, [r7, #23]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d105      	bne.n	8002188 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800217c:	4b3b      	ldr	r3, [pc, #236]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	4a3a      	ldr	r2, [pc, #232]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002186:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80ad 	beq.w	80022ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002192:	4b36      	ldr	r3, [pc, #216]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f003 030c 	and.w	r3, r3, #12
 800219a:	2b08      	cmp	r3, #8
 800219c:	d060      	beq.n	8002260 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d145      	bne.n	8002232 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021a6:	4b33      	ldr	r3, [pc, #204]	; (8002274 <HAL_RCC_OscConfig+0x4b4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff f8ce 	bl	800134c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff f8ca 	bl	800134c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e093      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021c6:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69da      	ldr	r2, [r3, #28]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e0:	019b      	lsls	r3, r3, #6
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	085b      	lsrs	r3, r3, #1
 80021ea:	3b01      	subs	r3, #1
 80021ec:	041b      	lsls	r3, r3, #16
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	431a      	orrs	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fc:	071b      	lsls	r3, r3, #28
 80021fe:	491b      	ldr	r1, [pc, #108]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_RCC_OscConfig+0x4b4>)
 8002206:	2201      	movs	r2, #1
 8002208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7ff f89f 	bl	800134c <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002212:	f7ff f89b 	bl	800134c <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e064      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002224:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d0f0      	beq.n	8002212 <HAL_RCC_OscConfig+0x452>
 8002230:	e05c      	b.n	80022ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002232:	4b10      	ldr	r3, [pc, #64]	; (8002274 <HAL_RCC_OscConfig+0x4b4>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff f888 	bl	800134c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff f884 	bl	800134c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e04d      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <HAL_RCC_OscConfig+0x4ac>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x480>
 800225e:	e045      	b.n	80022ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d107      	bne.n	8002278 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e040      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
 800226c:	40023800 	.word	0x40023800
 8002270:	40007000 	.word	0x40007000
 8002274:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002278:	4b1f      	ldr	r3, [pc, #124]	; (80022f8 <HAL_RCC_OscConfig+0x538>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d030      	beq.n	80022e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002290:	429a      	cmp	r2, r3
 8002292:	d129      	bne.n	80022e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	429a      	cmp	r2, r3
 80022a0:	d122      	bne.n	80022e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022a8:	4013      	ands	r3, r2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d119      	bne.n	80022e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	3b01      	subs	r3, #1
 80022c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d10f      	bne.n	80022e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800

080022fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07b      	b.n	8002406 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	2b00      	cmp	r3, #0
 8002314:	d108      	bne.n	8002328 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800231e:	d009      	beq.n	8002334 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
 8002326:	e005      	b.n	8002334 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d106      	bne.n	8002354 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7fe fd0a 	bl	8000d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800236a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002386:	431a      	orrs	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	431a      	orrs	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023a4:	431a      	orrs	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b8:	ea42 0103 	orr.w	r1, r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	0c1b      	lsrs	r3, r3, #16
 80023d2:	f003 0104 	and.w	r1, r3, #4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	f003 0210 	and.w	r2, r3, #16
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	69da      	ldr	r2, [r3, #28]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b08c      	sub	sp, #48	; 0x30
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
 800241a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800241c:	2301      	movs	r3, #1
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002420:	2300      	movs	r3, #0
 8002422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <HAL_SPI_TransmitReceive+0x26>
 8002430:	2302      	movs	r3, #2
 8002432:	e18a      	b.n	800274a <HAL_SPI_TransmitReceive+0x33c>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800243c:	f7fe ff86 	bl	800134c <HAL_GetTick>
 8002440:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002448:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002456:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800245a:	2b01      	cmp	r3, #1
 800245c:	d00f      	beq.n	800247e <HAL_SPI_TransmitReceive+0x70>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002464:	d107      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_SPI_TransmitReceive+0x68>
 800246e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002472:	2b04      	cmp	r3, #4
 8002474:	d003      	beq.n	800247e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002476:	2302      	movs	r3, #2
 8002478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800247c:	e15b      	b.n	8002736 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x82>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d002      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x82>
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d103      	bne.n	8002498 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002496:	e14e      	b.n	8002736 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d003      	beq.n	80024ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2205      	movs	r2, #5
 80024a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	887a      	ldrh	r2, [r7, #2]
 80024bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	887a      	ldrh	r2, [r7, #2]
 80024c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	887a      	ldrh	r2, [r7, #2]
 80024ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d007      	beq.n	8002500 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002508:	d178      	bne.n	80025fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <HAL_SPI_TransmitReceive+0x10a>
 8002512:	8b7b      	ldrh	r3, [r7, #26]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d166      	bne.n	80025e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	881a      	ldrh	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002528:	1c9a      	adds	r2, r3, #2
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002532:	b29b      	uxth	r3, r3
 8002534:	3b01      	subs	r3, #1
 8002536:	b29a      	uxth	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800253c:	e053      	b.n	80025e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b02      	cmp	r3, #2
 800254a:	d11b      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x176>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_SPI_TransmitReceive+0x176>
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d113      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	881a      	ldrh	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	1c9a      	adds	r2, r3, #2
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b01      	cmp	r3, #1
 8002590:	d119      	bne.n	80025c6 <HAL_SPI_TransmitReceive+0x1b8>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002596:	b29b      	uxth	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d014      	beq.n	80025c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a6:	b292      	uxth	r2, r2
 80025a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ae:	1c9a      	adds	r2, r3, #2
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b8:	b29b      	uxth	r3, r3
 80025ba:	3b01      	subs	r3, #1
 80025bc:	b29a      	uxth	r2, r3
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80025c2:	2301      	movs	r3, #1
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80025c6:	f7fe fec1 	bl	800134c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d807      	bhi.n	80025e6 <HAL_SPI_TransmitReceive+0x1d8>
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025dc:	d003      	beq.n	80025e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80025e4:	e0a7      	b.n	8002736 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1a6      	bne.n	800253e <HAL_SPI_TransmitReceive+0x130>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1a1      	bne.n	800253e <HAL_SPI_TransmitReceive+0x130>
 80025fa:	e07c      	b.n	80026f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_SPI_TransmitReceive+0x1fc>
 8002604:	8b7b      	ldrh	r3, [r7, #26]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d16b      	bne.n	80026e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	330c      	adds	r3, #12
 8002614:	7812      	ldrb	r2, [r2, #0]
 8002616:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	1c5a      	adds	r2, r3, #1
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002626:	b29b      	uxth	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b29a      	uxth	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002630:	e057      	b.n	80026e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b02      	cmp	r3, #2
 800263e:	d11c      	bne.n	800267a <HAL_SPI_TransmitReceive+0x26c>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d017      	beq.n	800267a <HAL_SPI_TransmitReceive+0x26c>
 800264a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264c:	2b01      	cmp	r3, #1
 800264e:	d114      	bne.n	800267a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	330c      	adds	r3, #12
 800265a:	7812      	ldrb	r2, [r2, #0]
 800265c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266c:	b29b      	uxth	r3, r3
 800266e:	3b01      	subs	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002676:	2300      	movs	r3, #0
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d119      	bne.n	80026bc <HAL_SPI_TransmitReceive+0x2ae>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800268c:	b29b      	uxth	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d014      	beq.n	80026bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026b8:	2301      	movs	r3, #1
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026bc:	f7fe fe46 	bl	800134c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d803      	bhi.n	80026d4 <HAL_SPI_TransmitReceive+0x2c6>
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d2:	d102      	bne.n	80026da <HAL_SPI_TransmitReceive+0x2cc>
 80026d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d103      	bne.n	80026e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80026e0:	e029      	b.n	8002736 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1a2      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x224>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d19d      	bne.n	8002632 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 f8b2 	bl	8002864 <SPI_EndRxTxTransaction>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d006      	beq.n	8002714 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002712:	e010      	b.n	8002736 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10b      	bne.n	8002734 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	e000      	b.n	8002736 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002734:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002746:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800274a:	4618      	mov	r0, r3
 800274c:	3730      	adds	r7, #48	; 0x30
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
	...

08002754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002764:	f7fe fdf2 	bl	800134c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	4413      	add	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002774:	f7fe fdea 	bl	800134c <HAL_GetTick>
 8002778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800277a:	4b39      	ldr	r3, [pc, #228]	; (8002860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	015b      	lsls	r3, r3, #5
 8002780:	0d1b      	lsrs	r3, r3, #20
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	fb02 f303 	mul.w	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800278a:	e054      	b.n	8002836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002792:	d050      	beq.n	8002836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002794:	f7fe fdda 	bl	800134c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d902      	bls.n	80027aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d13d      	bne.n	8002826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80027b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027c2:	d111      	bne.n	80027e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027cc:	d004      	beq.n	80027d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027d6:	d107      	bne.n	80027e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f0:	d10f      	bne.n	8002812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002800:	601a      	str	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e017      	b.n	8002856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	3b01      	subs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	4013      	ands	r3, r2
 8002840:	68ba      	ldr	r2, [r7, #8]
 8002842:	429a      	cmp	r2, r3
 8002844:	bf0c      	ite	eq
 8002846:	2301      	moveq	r3, #1
 8002848:	2300      	movne	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	79fb      	ldrb	r3, [r7, #7]
 8002850:	429a      	cmp	r2, r3
 8002852:	d19b      	bne.n	800278c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3720      	adds	r7, #32
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000000 	.word	0x20000000

08002864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af02      	add	r7, sp, #8
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <SPI_EndRxTxTransaction+0x7c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a1b      	ldr	r2, [pc, #108]	; (80028e4 <SPI_EndRxTxTransaction+0x80>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0d5b      	lsrs	r3, r3, #21
 800287c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800288e:	d112      	bne.n	80028b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	2200      	movs	r2, #0
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7ff ff5a 	bl	8002754 <SPI_WaitFlagStateUntilTimeout>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028aa:	f043 0220 	orr.w	r2, r3, #32
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e00f      	b.n	80028d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	3b01      	subs	r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d0f2      	beq.n	80028b6 <SPI_EndRxTxTransaction+0x52>
 80028d0:	e000      	b.n	80028d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80028d2:	bf00      	nop
  }

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000000 	.word	0x20000000
 80028e4:	165e9f81 	.word	0x165e9f81

080028e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e041      	b.n	800297e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002900:	b2db      	uxtb	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d106      	bne.n	8002914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7fe fa72 	bl	8000df8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	3304      	adds	r3, #4
 8002924:	4619      	mov	r1, r3
 8002926:	4610      	mov	r0, r2
 8002928:	f000 fc04 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e041      	b.n	8002a1c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d106      	bne.n	80029b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f839 	bl	8002a24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	4619      	mov	r1, r3
 80029c4:	4610      	mov	r0, r2
 80029c6:	f000 fbb5 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d109      	bne.n	8002a5c <HAL_TIM_PWM_Start+0x24>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	bf14      	ite	ne
 8002a54:	2301      	movne	r3, #1
 8002a56:	2300      	moveq	r3, #0
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	e022      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x6a>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d109      	bne.n	8002a76 <HAL_TIM_PWM_Start+0x3e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	bf14      	ite	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	2300      	moveq	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	e015      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x6a>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d109      	bne.n	8002a90 <HAL_TIM_PWM_Start+0x58>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	bf14      	ite	ne
 8002a88:	2301      	movne	r3, #1
 8002a8a:	2300      	moveq	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	e008      	b.n	8002aa2 <HAL_TIM_PWM_Start+0x6a>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e07c      	b.n	8002ba4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d104      	bne.n	8002aba <HAL_TIM_PWM_Start+0x82>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab8:	e013      	b.n	8002ae2 <HAL_TIM_PWM_Start+0xaa>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d104      	bne.n	8002aca <HAL_TIM_PWM_Start+0x92>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ac8:	e00b      	b.n	8002ae2 <HAL_TIM_PWM_Start+0xaa>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d104      	bne.n	8002ada <HAL_TIM_PWM_Start+0xa2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad8:	e003      	b.n	8002ae2 <HAL_TIM_PWM_Start+0xaa>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2202      	movs	r2, #2
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	6839      	ldr	r1, [r7, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 fe0c 	bl	8003708 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <HAL_TIM_PWM_Start+0x174>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_TIM_PWM_Start+0xcc>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2c      	ldr	r2, [pc, #176]	; (8002bb0 <HAL_TIM_PWM_Start+0x178>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d101      	bne.n	8002b08 <HAL_TIM_PWM_Start+0xd0>
 8002b04:	2301      	movs	r3, #1
 8002b06:	e000      	b.n	8002b0a <HAL_TIM_PWM_Start+0xd2>
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d007      	beq.n	8002b1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <HAL_TIM_PWM_Start+0x174>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d022      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x136>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d01d      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x136>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <HAL_TIM_PWM_Start+0x17c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d018      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x136>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a1d      	ldr	r2, [pc, #116]	; (8002bb8 <HAL_TIM_PWM_Start+0x180>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d013      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x136>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <HAL_TIM_PWM_Start+0x184>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d00e      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x136>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a16      	ldr	r2, [pc, #88]	; (8002bb0 <HAL_TIM_PWM_Start+0x178>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d009      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x136>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a18      	ldr	r2, [pc, #96]	; (8002bc0 <HAL_TIM_PWM_Start+0x188>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d004      	beq.n	8002b6e <HAL_TIM_PWM_Start+0x136>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a16      	ldr	r2, [pc, #88]	; (8002bc4 <HAL_TIM_PWM_Start+0x18c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d111      	bne.n	8002b92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b06      	cmp	r3, #6
 8002b7e:	d010      	beq.n	8002ba2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b90:	e007      	b.n	8002ba2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f042 0201 	orr.w	r2, r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40010000 	.word	0x40010000
 8002bb0:	40010400 	.word	0x40010400
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800
 8002bbc:	40000c00 	.word	0x40000c00
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40001800 	.word	0x40001800

08002bc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d101      	bne.n	8002bdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e097      	b.n	8002d0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe f923 	bl	8000e3c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c0c:	f023 0307 	bic.w	r3, r3, #7
 8002c10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f000 fa89 	bl	8003134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c4a:	f023 0303 	bic.w	r3, r3, #3
 8002c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c68:	f023 030c 	bic.w	r3, r3, #12
 8002c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	021b      	lsls	r3, r3, #8
 8002c84:	4313      	orrs	r3, r2
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6a1b      	ldr	r3, [r3, #32]
 8002c96:	031b      	lsls	r3, r3, #12
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002ca6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002cae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	695b      	ldr	r3, [r3, #20]
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d110      	bne.n	8002d66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d4a:	7b7b      	ldrb	r3, [r7, #13]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d001      	beq.n	8002d54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e069      	b.n	8002e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d64:	e031      	b.n	8002dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d110      	bne.n	8002d8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d6c:	7bbb      	ldrb	r3, [r7, #14]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d102      	bne.n	8002d78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d72:	7b3b      	ldrb	r3, [r7, #12]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d001      	beq.n	8002d7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e055      	b.n	8002e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d8c:	e01d      	b.n	8002dca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d108      	bne.n	8002da6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d94:	7bbb      	ldrb	r3, [r7, #14]
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d105      	bne.n	8002da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d9a:	7b7b      	ldrb	r3, [r7, #13]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d102      	bne.n	8002da6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002da0:	7b3b      	ldrb	r3, [r7, #12]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d001      	beq.n	8002daa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e03e      	b.n	8002e28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2202      	movs	r2, #2
 8002dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_TIM_Encoder_Start+0xc4>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d008      	beq.n	8002de8 <HAL_TIM_Encoder_Start+0xd4>
 8002dd6:	e00f      	b.n	8002df8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	2100      	movs	r1, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	f000 fc91 	bl	8003708 <TIM_CCxChannelCmd>
      break;
 8002de6:	e016      	b.n	8002e16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2201      	movs	r2, #1
 8002dee:	2104      	movs	r1, #4
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fc89 	bl	8003708 <TIM_CCxChannelCmd>
      break;
 8002df6:	e00e      	b.n	8002e16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 fc81 	bl	8003708 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	2104      	movs	r1, #4
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fc7a 	bl	8003708 <TIM_CCxChannelCmd>
      break;
 8002e14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e0ac      	b.n	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b0c      	cmp	r3, #12
 8002e56:	f200 809f 	bhi.w	8002f98 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002e5a:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e60:	08002e95 	.word	0x08002e95
 8002e64:	08002f99 	.word	0x08002f99
 8002e68:	08002f99 	.word	0x08002f99
 8002e6c:	08002f99 	.word	0x08002f99
 8002e70:	08002ed5 	.word	0x08002ed5
 8002e74:	08002f99 	.word	0x08002f99
 8002e78:	08002f99 	.word	0x08002f99
 8002e7c:	08002f99 	.word	0x08002f99
 8002e80:	08002f17 	.word	0x08002f17
 8002e84:	08002f99 	.word	0x08002f99
 8002e88:	08002f99 	.word	0x08002f99
 8002e8c:	08002f99 	.word	0x08002f99
 8002e90:	08002f57 	.word	0x08002f57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68b9      	ldr	r1, [r7, #8]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f9ea 	bl	8003274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0208 	orr.w	r2, r2, #8
 8002eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699a      	ldr	r2, [r3, #24]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0204 	bic.w	r2, r2, #4
 8002ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6999      	ldr	r1, [r3, #24]
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	619a      	str	r2, [r3, #24]
      break;
 8002ed2:	e062      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fa3a 	bl	8003354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699a      	ldr	r2, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6999      	ldr	r1, [r3, #24]
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	021a      	lsls	r2, r3, #8
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	619a      	str	r2, [r3, #24]
      break;
 8002f14:	e041      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	68b9      	ldr	r1, [r7, #8]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fa8f 	bl	8003440 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	69da      	ldr	r2, [r3, #28]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0208 	orr.w	r2, r2, #8
 8002f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69da      	ldr	r2, [r3, #28]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0204 	bic.w	r2, r2, #4
 8002f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	69d9      	ldr	r1, [r3, #28]
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	691a      	ldr	r2, [r3, #16]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	61da      	str	r2, [r3, #28]
      break;
 8002f54:	e021      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fae3 	bl	8003528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	69da      	ldr	r2, [r3, #28]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	69d9      	ldr	r1, [r3, #28]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	021a      	lsls	r2, r3, #8
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	61da      	str	r2, [r3, #28]
      break;
 8002f96:	e000      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002f98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_TIM_ConfigClockSource+0x18>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e0b3      	b.n	800312c <HAL_TIM_ConfigClockSource+0x180>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fe2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffc:	d03e      	beq.n	800307c <HAL_TIM_ConfigClockSource+0xd0>
 8002ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003002:	f200 8087 	bhi.w	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300a:	f000 8085 	beq.w	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	d87f      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003014:	2b70      	cmp	r3, #112	; 0x70
 8003016:	d01a      	beq.n	800304e <HAL_TIM_ConfigClockSource+0xa2>
 8003018:	2b70      	cmp	r3, #112	; 0x70
 800301a:	d87b      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 800301c:	2b60      	cmp	r3, #96	; 0x60
 800301e:	d050      	beq.n	80030c2 <HAL_TIM_ConfigClockSource+0x116>
 8003020:	2b60      	cmp	r3, #96	; 0x60
 8003022:	d877      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003024:	2b50      	cmp	r3, #80	; 0x50
 8003026:	d03c      	beq.n	80030a2 <HAL_TIM_ConfigClockSource+0xf6>
 8003028:	2b50      	cmp	r3, #80	; 0x50
 800302a:	d873      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 800302c:	2b40      	cmp	r3, #64	; 0x40
 800302e:	d058      	beq.n	80030e2 <HAL_TIM_ConfigClockSource+0x136>
 8003030:	2b40      	cmp	r3, #64	; 0x40
 8003032:	d86f      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003034:	2b30      	cmp	r3, #48	; 0x30
 8003036:	d064      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x156>
 8003038:	2b30      	cmp	r3, #48	; 0x30
 800303a:	d86b      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 800303c:	2b20      	cmp	r3, #32
 800303e:	d060      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x156>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d867      	bhi.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d05c      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x156>
 8003048:	2b10      	cmp	r3, #16
 800304a:	d05a      	beq.n	8003102 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800304c:	e062      	b.n	8003114 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	6899      	ldr	r1, [r3, #8]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f000 fb33 	bl	80036c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003070:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	609a      	str	r2, [r3, #8]
      break;
 800307a:	e04e      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	6899      	ldr	r1, [r3, #8]
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f000 fb1c 	bl	80036c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800309e:	609a      	str	r2, [r3, #8]
      break;
 80030a0:	e03b      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	6859      	ldr	r1, [r3, #4]
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f000 fa90 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2150      	movs	r1, #80	; 0x50
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 fae9 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 80030c0:	e02b      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6859      	ldr	r1, [r3, #4]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f000 faaf 	bl	8003632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2160      	movs	r1, #96	; 0x60
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fad9 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 80030e0:	e01b      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6859      	ldr	r1, [r3, #4]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	461a      	mov	r2, r3
 80030f0:	f000 fa70 	bl	80035d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2140      	movs	r1, #64	; 0x40
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fac9 	bl	8003692 <TIM_ITRx_SetConfig>
      break;
 8003100:	e00b      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4619      	mov	r1, r3
 800310c:	4610      	mov	r0, r2
 800310e:	f000 fac0 	bl	8003692 <TIM_ITRx_SetConfig>
        break;
 8003112:	e002      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003118:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2201      	movs	r2, #1
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a40      	ldr	r2, [pc, #256]	; (8003248 <TIM_Base_SetConfig+0x114>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003152:	d00f      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a3d      	ldr	r2, [pc, #244]	; (800324c <TIM_Base_SetConfig+0x118>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00b      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a3c      	ldr	r2, [pc, #240]	; (8003250 <TIM_Base_SetConfig+0x11c>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a3b      	ldr	r2, [pc, #236]	; (8003254 <TIM_Base_SetConfig+0x120>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a3a      	ldr	r2, [pc, #232]	; (8003258 <TIM_Base_SetConfig+0x124>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d108      	bne.n	8003186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a2f      	ldr	r2, [pc, #188]	; (8003248 <TIM_Base_SetConfig+0x114>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d02b      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003194:	d027      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a2c      	ldr	r2, [pc, #176]	; (800324c <TIM_Base_SetConfig+0x118>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d023      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <TIM_Base_SetConfig+0x11c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01f      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a2a      	ldr	r2, [pc, #168]	; (8003254 <TIM_Base_SetConfig+0x120>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01b      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a29      	ldr	r2, [pc, #164]	; (8003258 <TIM_Base_SetConfig+0x124>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d017      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a28      	ldr	r2, [pc, #160]	; (800325c <TIM_Base_SetConfig+0x128>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a27      	ldr	r2, [pc, #156]	; (8003260 <TIM_Base_SetConfig+0x12c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00f      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a26      	ldr	r2, [pc, #152]	; (8003264 <TIM_Base_SetConfig+0x130>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a25      	ldr	r2, [pc, #148]	; (8003268 <TIM_Base_SetConfig+0x134>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a24      	ldr	r2, [pc, #144]	; (800326c <TIM_Base_SetConfig+0x138>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a23      	ldr	r2, [pc, #140]	; (8003270 <TIM_Base_SetConfig+0x13c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d108      	bne.n	80031f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <TIM_Base_SetConfig+0x114>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0xf8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a0c      	ldr	r2, [pc, #48]	; (8003258 <TIM_Base_SetConfig+0x124>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d103      	bne.n	8003234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	615a      	str	r2, [r3, #20]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	40010000 	.word	0x40010000
 800324c:	40000400 	.word	0x40000400
 8003250:	40000800 	.word	0x40000800
 8003254:	40000c00 	.word	0x40000c00
 8003258:	40010400 	.word	0x40010400
 800325c:	40014000 	.word	0x40014000
 8003260:	40014400 	.word	0x40014400
 8003264:	40014800 	.word	0x40014800
 8003268:	40001800 	.word	0x40001800
 800326c:	40001c00 	.word	0x40001c00
 8003270:	40002000 	.word	0x40002000

08003274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	f023 0201 	bic.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f023 0302 	bic.w	r3, r3, #2
 80032bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a20      	ldr	r2, [pc, #128]	; (800334c <TIM_OC1_SetConfig+0xd8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_OC1_SetConfig+0x64>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <TIM_OC1_SetConfig+0xdc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10c      	bne.n	80032f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f023 0308 	bic.w	r3, r3, #8
 80032de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f023 0304 	bic.w	r3, r3, #4
 80032f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a15      	ldr	r2, [pc, #84]	; (800334c <TIM_OC1_SetConfig+0xd8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d003      	beq.n	8003302 <TIM_OC1_SetConfig+0x8e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a14      	ldr	r2, [pc, #80]	; (8003350 <TIM_OC1_SetConfig+0xdc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d111      	bne.n	8003326 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4313      	orrs	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	621a      	str	r2, [r3, #32]
}
 8003340:	bf00      	nop
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40010000 	.word	0x40010000
 8003350:	40010400 	.word	0x40010400

08003354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	f023 0210 	bic.w	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	021b      	lsls	r3, r3, #8
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f023 0320 	bic.w	r3, r3, #32
 800339e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a22      	ldr	r2, [pc, #136]	; (8003438 <TIM_OC2_SetConfig+0xe4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_OC2_SetConfig+0x68>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a21      	ldr	r2, [pc, #132]	; (800343c <TIM_OC2_SetConfig+0xe8>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d10d      	bne.n	80033d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <TIM_OC2_SetConfig+0xe4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d003      	beq.n	80033e8 <TIM_OC2_SetConfig+0x94>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <TIM_OC2_SetConfig+0xe8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d113      	bne.n	8003410 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	695b      	ldr	r3, [r3, #20]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4313      	orrs	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	40010000 	.word	0x40010000
 800343c:	40010400 	.word	0x40010400

08003440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f023 0303 	bic.w	r3, r3, #3
 8003476:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003488:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	021b      	lsls	r3, r3, #8
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a21      	ldr	r2, [pc, #132]	; (8003520 <TIM_OC3_SetConfig+0xe0>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d003      	beq.n	80034a6 <TIM_OC3_SetConfig+0x66>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a20      	ldr	r2, [pc, #128]	; (8003524 <TIM_OC3_SetConfig+0xe4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10d      	bne.n	80034c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a16      	ldr	r2, [pc, #88]	; (8003520 <TIM_OC3_SetConfig+0xe0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d003      	beq.n	80034d2 <TIM_OC3_SetConfig+0x92>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <TIM_OC3_SetConfig+0xe4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d113      	bne.n	80034fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	011b      	lsls	r3, r3, #4
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	621a      	str	r2, [r3, #32]
}
 8003514:	bf00      	nop
 8003516:	371c      	adds	r7, #28
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40010000 	.word	0x40010000
 8003524:	40010400 	.word	0x40010400

08003528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	031b      	lsls	r3, r3, #12
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a12      	ldr	r2, [pc, #72]	; (80035cc <TIM_OC4_SetConfig+0xa4>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC4_SetConfig+0x68>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a11      	ldr	r2, [pc, #68]	; (80035d0 <TIM_OC4_SetConfig+0xa8>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40010400 	.word	0x40010400

080035d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a1b      	ldr	r3, [r3, #32]
 80035e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0201 	bic.w	r2, r3, #1
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 030a 	bic.w	r3, r3, #10
 8003610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	f023 0210 	bic.w	r2, r3, #16
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a1b      	ldr	r3, [r3, #32]
 8003654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800365c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	031b      	lsls	r3, r3, #12
 8003662:	697a      	ldr	r2, [r7, #20]
 8003664:	4313      	orrs	r3, r2
 8003666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800366e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	621a      	str	r2, [r3, #32]
}
 8003686:	bf00      	nop
 8003688:	371c      	adds	r7, #28
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003692:	b480      	push	{r7}
 8003694:	b085      	sub	sp, #20
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	f043 0307 	orr.w	r3, r3, #7
 80036b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b087      	sub	sp, #28
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	bf00      	nop
 80036fe:	371c      	adds	r7, #28
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003708:	b480      	push	{r7}
 800370a:	b087      	sub	sp, #28
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 031f 	and.w	r3, r3, #31
 800371a:	2201      	movs	r2, #1
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a1a      	ldr	r2, [r3, #32]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	43db      	mvns	r3, r3
 800372a:	401a      	ands	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1a      	ldr	r2, [r3, #32]
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	431a      	orrs	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	621a      	str	r2, [r3, #32]
}
 8003746:	bf00      	nop
 8003748:	371c      	adds	r7, #28
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
	...

08003754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003768:	2302      	movs	r3, #2
 800376a:	e05a      	b.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a21      	ldr	r2, [pc, #132]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b8:	d01d      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a1d      	ldr	r2, [pc, #116]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d018      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a1b      	ldr	r2, [pc, #108]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d013      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1a      	ldr	r2, [pc, #104]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00e      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a18      	ldr	r2, [pc, #96]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d009      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a17      	ldr	r2, [pc, #92]	; (8003844 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a15      	ldr	r2, [pc, #84]	; (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10c      	bne.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4313      	orrs	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40010000 	.word	0x40010000
 8003834:	40000400 	.word	0x40000400
 8003838:	40000800 	.word	0x40000800
 800383c:	40000c00 	.word	0x40000c00
 8003840:	40010400 	.word	0x40010400
 8003844:	40014000 	.word	0x40014000
 8003848:	40001800 	.word	0x40001800

0800384c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003864:	2302      	movs	r3, #2
 8003866:	e03d      	b.n	80038e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	4313      	orrs	r3, r2
 800387c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	4313      	orrs	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e03f      	b.n	8003982 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fd fb46 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2224      	movs	r2, #36	; 0x24
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003932:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	f000 f905 	bl	8003b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	691a      	ldr	r2, [r3, #16]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003948:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003958:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003968:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2220      	movs	r2, #32
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398a:	b580      	push	{r7, lr}
 800398c:	b08a      	sub	sp, #40	; 0x28
 800398e:	af02      	add	r7, sp, #8
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	603b      	str	r3, [r7, #0]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d17c      	bne.n	8003aa4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <HAL_UART_Transmit+0x2c>
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e075      	b.n	8003aa6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_UART_Transmit+0x3e>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e06e      	b.n	8003aa6 <HAL_UART_Transmit+0x11c>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2221      	movs	r2, #33	; 0x21
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039de:	f7fd fcb5 	bl	800134c <HAL_GetTick>
 80039e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	88fa      	ldrh	r2, [r7, #6]
 80039e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f8:	d108      	bne.n	8003a0c <HAL_UART_Transmit+0x82>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d104      	bne.n	8003a0c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	61bb      	str	r3, [r7, #24]
 8003a0a:	e003      	b.n	8003a14 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a1c:	e02a      	b.n	8003a74 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2200      	movs	r2, #0
 8003a26:	2180      	movs	r1, #128	; 0x80
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f840 	bl	8003aae <UART_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e036      	b.n	8003aa6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10b      	bne.n	8003a56 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	3302      	adds	r3, #2
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	e007      	b.n	8003a66 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	781a      	ldrb	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	3301      	adds	r3, #1
 8003a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1cf      	bne.n	8003a1e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2140      	movs	r1, #64	; 0x40
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f810 	bl	8003aae <UART_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e006      	b.n	8003aa6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e000      	b.n	8003aa6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003aa4:	2302      	movs	r3, #2
  }
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3720      	adds	r7, #32
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	603b      	str	r3, [r7, #0]
 8003aba:	4613      	mov	r3, r2
 8003abc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003abe:	e02c      	b.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac6:	d028      	beq.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d007      	beq.n	8003ade <UART_WaitOnFlagUntilTimeout+0x30>
 8003ace:	f7fd fc3d 	bl	800134c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d21d      	bcs.n	8003b1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003aec:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 0201 	bic.w	r2, r2, #1
 8003afc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e00f      	b.n	8003b3a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4013      	ands	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d0c3      	beq.n	8003ac0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b48:	b09f      	sub	sp, #124	; 0x7c
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5a:	68d9      	ldr	r1, [r3, #12]
 8003b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	ea40 0301 	orr.w	r3, r0, r1
 8003b64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003b88:	f021 010c 	bic.w	r1, r1, #12
 8003b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b92:	430b      	orrs	r3, r1
 8003b94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba2:	6999      	ldr	r1, [r3, #24]
 8003ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	ea40 0301 	orr.w	r3, r0, r1
 8003bac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	4bc5      	ldr	r3, [pc, #788]	; (8003ec8 <UART_SetConfig+0x384>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d004      	beq.n	8003bc2 <UART_SetConfig+0x7e>
 8003bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4bc3      	ldr	r3, [pc, #780]	; (8003ecc <UART_SetConfig+0x388>)
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d103      	bne.n	8003bca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bc2:	f7fd ff8d 	bl	8001ae0 <HAL_RCC_GetPCLK2Freq>
 8003bc6:	6778      	str	r0, [r7, #116]	; 0x74
 8003bc8:	e002      	b.n	8003bd0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bca:	f7fd ff75 	bl	8001ab8 <HAL_RCC_GetPCLK1Freq>
 8003bce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bd8:	f040 80b6 	bne.w	8003d48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bdc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bde:	461c      	mov	r4, r3
 8003be0:	f04f 0500 	mov.w	r5, #0
 8003be4:	4622      	mov	r2, r4
 8003be6:	462b      	mov	r3, r5
 8003be8:	1891      	adds	r1, r2, r2
 8003bea:	6439      	str	r1, [r7, #64]	; 0x40
 8003bec:	415b      	adcs	r3, r3
 8003bee:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003bf4:	1912      	adds	r2, r2, r4
 8003bf6:	eb45 0303 	adc.w	r3, r5, r3
 8003bfa:	f04f 0000 	mov.w	r0, #0
 8003bfe:	f04f 0100 	mov.w	r1, #0
 8003c02:	00d9      	lsls	r1, r3, #3
 8003c04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c08:	00d0      	lsls	r0, r2, #3
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	1911      	adds	r1, r2, r4
 8003c10:	6639      	str	r1, [r7, #96]	; 0x60
 8003c12:	416b      	adcs	r3, r5
 8003c14:	667b      	str	r3, [r7, #100]	; 0x64
 8003c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	1891      	adds	r1, r2, r2
 8003c22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c24:	415b      	adcs	r3, r3
 8003c26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c30:	f7fc fb3e 	bl	80002b0 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4ba5      	ldr	r3, [pc, #660]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003c3a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	011e      	lsls	r6, r3, #4
 8003c42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c44:	461c      	mov	r4, r3
 8003c46:	f04f 0500 	mov.w	r5, #0
 8003c4a:	4622      	mov	r2, r4
 8003c4c:	462b      	mov	r3, r5
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	6339      	str	r1, [r7, #48]	; 0x30
 8003c52:	415b      	adcs	r3, r3
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
 8003c56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c5a:	1912      	adds	r2, r2, r4
 8003c5c:	eb45 0303 	adc.w	r3, r5, r3
 8003c60:	f04f 0000 	mov.w	r0, #0
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	00d9      	lsls	r1, r3, #3
 8003c6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c6e:	00d0      	lsls	r0, r2, #3
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	1911      	adds	r1, r2, r4
 8003c76:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c78:	416b      	adcs	r3, r5
 8003c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	461a      	mov	r2, r3
 8003c82:	f04f 0300 	mov.w	r3, #0
 8003c86:	1891      	adds	r1, r2, r2
 8003c88:	62b9      	str	r1, [r7, #40]	; 0x28
 8003c8a:	415b      	adcs	r3, r3
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003c92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003c96:	f7fc fb0b 	bl	80002b0 <__aeabi_uldivmod>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	4b8c      	ldr	r3, [pc, #560]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003ca0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ca4:	095b      	lsrs	r3, r3, #5
 8003ca6:	2164      	movs	r1, #100	; 0x64
 8003ca8:	fb01 f303 	mul.w	r3, r1, r3
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	3332      	adds	r3, #50	; 0x32
 8003cb2:	4a87      	ldr	r2, [pc, #540]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb8:	095b      	lsrs	r3, r3, #5
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cc0:	441e      	add	r6, r3
 8003cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	1894      	adds	r4, r2, r2
 8003cd0:	623c      	str	r4, [r7, #32]
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cda:	1812      	adds	r2, r2, r0
 8003cdc:	eb41 0303 	adc.w	r3, r1, r3
 8003ce0:	f04f 0400 	mov.w	r4, #0
 8003ce4:	f04f 0500 	mov.w	r5, #0
 8003ce8:	00dd      	lsls	r5, r3, #3
 8003cea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cee:	00d4      	lsls	r4, r2, #3
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	1814      	adds	r4, r2, r0
 8003cf6:	653c      	str	r4, [r7, #80]	; 0x50
 8003cf8:	414b      	adcs	r3, r1
 8003cfa:	657b      	str	r3, [r7, #84]	; 0x54
 8003cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	461a      	mov	r2, r3
 8003d02:	f04f 0300 	mov.w	r3, #0
 8003d06:	1891      	adds	r1, r2, r2
 8003d08:	61b9      	str	r1, [r7, #24]
 8003d0a:	415b      	adcs	r3, r3
 8003d0c:	61fb      	str	r3, [r7, #28]
 8003d0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d16:	f7fc facb 	bl	80002b0 <__aeabi_uldivmod>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4b6c      	ldr	r3, [pc, #432]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003d20:	fba3 1302 	umull	r1, r3, r3, r2
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	2164      	movs	r1, #100	; 0x64
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	3332      	adds	r3, #50	; 0x32
 8003d32:	4a67      	ldr	r2, [pc, #412]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003d34:	fba2 2303 	umull	r2, r3, r2, r3
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	f003 0207 	and.w	r2, r3, #7
 8003d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4432      	add	r2, r6
 8003d44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d46:	e0b9      	b.n	8003ebc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d4a:	461c      	mov	r4, r3
 8003d4c:	f04f 0500 	mov.w	r5, #0
 8003d50:	4622      	mov	r2, r4
 8003d52:	462b      	mov	r3, r5
 8003d54:	1891      	adds	r1, r2, r2
 8003d56:	6139      	str	r1, [r7, #16]
 8003d58:	415b      	adcs	r3, r3
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d60:	1912      	adds	r2, r2, r4
 8003d62:	eb45 0303 	adc.w	r3, r5, r3
 8003d66:	f04f 0000 	mov.w	r0, #0
 8003d6a:	f04f 0100 	mov.w	r1, #0
 8003d6e:	00d9      	lsls	r1, r3, #3
 8003d70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d74:	00d0      	lsls	r0, r2, #3
 8003d76:	4602      	mov	r2, r0
 8003d78:	460b      	mov	r3, r1
 8003d7a:	eb12 0804 	adds.w	r8, r2, r4
 8003d7e:	eb43 0905 	adc.w	r9, r3, r5
 8003d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	4618      	mov	r0, r3
 8003d88:	f04f 0100 	mov.w	r1, #0
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	008b      	lsls	r3, r1, #2
 8003d96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d9a:	0082      	lsls	r2, r0, #2
 8003d9c:	4640      	mov	r0, r8
 8003d9e:	4649      	mov	r1, r9
 8003da0:	f7fc fa86 	bl	80002b0 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4b49      	ldr	r3, [pc, #292]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003daa:	fba3 2302 	umull	r2, r3, r3, r2
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	011e      	lsls	r6, r3, #4
 8003db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db4:	4618      	mov	r0, r3
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	4602      	mov	r2, r0
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	1894      	adds	r4, r2, r2
 8003dc0:	60bc      	str	r4, [r7, #8]
 8003dc2:	415b      	adcs	r3, r3
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dca:	1812      	adds	r2, r2, r0
 8003dcc:	eb41 0303 	adc.w	r3, r1, r3
 8003dd0:	f04f 0400 	mov.w	r4, #0
 8003dd4:	f04f 0500 	mov.w	r5, #0
 8003dd8:	00dd      	lsls	r5, r3, #3
 8003dda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003dde:	00d4      	lsls	r4, r2, #3
 8003de0:	4622      	mov	r2, r4
 8003de2:	462b      	mov	r3, r5
 8003de4:	1814      	adds	r4, r2, r0
 8003de6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003de8:	414b      	adcs	r3, r1
 8003dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f04f 0100 	mov.w	r1, #0
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	008b      	lsls	r3, r1, #2
 8003e00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e04:	0082      	lsls	r2, r0, #2
 8003e06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e0a:	f7fc fa51 	bl	80002b0 <__aeabi_uldivmod>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003e14:	fba3 1302 	umull	r1, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	2164      	movs	r1, #100	; 0x64
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	011b      	lsls	r3, r3, #4
 8003e24:	3332      	adds	r3, #50	; 0x32
 8003e26:	4a2a      	ldr	r2, [pc, #168]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e32:	441e      	add	r6, r3
 8003e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e36:	4618      	mov	r0, r3
 8003e38:	f04f 0100 	mov.w	r1, #0
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	460b      	mov	r3, r1
 8003e40:	1894      	adds	r4, r2, r2
 8003e42:	603c      	str	r4, [r7, #0]
 8003e44:	415b      	adcs	r3, r3
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e4c:	1812      	adds	r2, r2, r0
 8003e4e:	eb41 0303 	adc.w	r3, r1, r3
 8003e52:	f04f 0400 	mov.w	r4, #0
 8003e56:	f04f 0500 	mov.w	r5, #0
 8003e5a:	00dd      	lsls	r5, r3, #3
 8003e5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e60:	00d4      	lsls	r4, r2, #3
 8003e62:	4622      	mov	r2, r4
 8003e64:	462b      	mov	r3, r5
 8003e66:	eb12 0a00 	adds.w	sl, r2, r0
 8003e6a:	eb43 0b01 	adc.w	fp, r3, r1
 8003e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f04f 0100 	mov.w	r1, #0
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	008b      	lsls	r3, r1, #2
 8003e82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e86:	0082      	lsls	r2, r0, #2
 8003e88:	4650      	mov	r0, sl
 8003e8a:	4659      	mov	r1, fp
 8003e8c:	f7fc fa10 	bl	80002b0 <__aeabi_uldivmod>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003e96:	fba3 1302 	umull	r1, r3, r3, r2
 8003e9a:	095b      	lsrs	r3, r3, #5
 8003e9c:	2164      	movs	r1, #100	; 0x64
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	3332      	adds	r3, #50	; 0x32
 8003ea8:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <UART_SetConfig+0x38c>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4432      	add	r2, r6
 8003eba:	609a      	str	r2, [r3, #8]
}
 8003ebc:	bf00      	nop
 8003ebe:	377c      	adds	r7, #124	; 0x7c
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40011000 	.word	0x40011000
 8003ecc:	40011400 	.word	0x40011400
 8003ed0:	51eb851f 	.word	0x51eb851f

08003ed4 <__errno>:
 8003ed4:	4b01      	ldr	r3, [pc, #4]	; (8003edc <__errno+0x8>)
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	2000000c 	.word	0x2000000c

08003ee0 <__libc_init_array>:
 8003ee0:	b570      	push	{r4, r5, r6, lr}
 8003ee2:	4d0d      	ldr	r5, [pc, #52]	; (8003f18 <__libc_init_array+0x38>)
 8003ee4:	4c0d      	ldr	r4, [pc, #52]	; (8003f1c <__libc_init_array+0x3c>)
 8003ee6:	1b64      	subs	r4, r4, r5
 8003ee8:	10a4      	asrs	r4, r4, #2
 8003eea:	2600      	movs	r6, #0
 8003eec:	42a6      	cmp	r6, r4
 8003eee:	d109      	bne.n	8003f04 <__libc_init_array+0x24>
 8003ef0:	4d0b      	ldr	r5, [pc, #44]	; (8003f20 <__libc_init_array+0x40>)
 8003ef2:	4c0c      	ldr	r4, [pc, #48]	; (8003f24 <__libc_init_array+0x44>)
 8003ef4:	f001 f9be 	bl	8005274 <_init>
 8003ef8:	1b64      	subs	r4, r4, r5
 8003efa:	10a4      	asrs	r4, r4, #2
 8003efc:	2600      	movs	r6, #0
 8003efe:	42a6      	cmp	r6, r4
 8003f00:	d105      	bne.n	8003f0e <__libc_init_array+0x2e>
 8003f02:	bd70      	pop	{r4, r5, r6, pc}
 8003f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f08:	4798      	blx	r3
 8003f0a:	3601      	adds	r6, #1
 8003f0c:	e7ee      	b.n	8003eec <__libc_init_array+0xc>
 8003f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f12:	4798      	blx	r3
 8003f14:	3601      	adds	r6, #1
 8003f16:	e7f2      	b.n	8003efe <__libc_init_array+0x1e>
 8003f18:	08005390 	.word	0x08005390
 8003f1c:	08005390 	.word	0x08005390
 8003f20:	08005390 	.word	0x08005390
 8003f24:	08005394 	.word	0x08005394

08003f28 <memset>:
 8003f28:	4402      	add	r2, r0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d100      	bne.n	8003f32 <memset+0xa>
 8003f30:	4770      	bx	lr
 8003f32:	f803 1b01 	strb.w	r1, [r3], #1
 8003f36:	e7f9      	b.n	8003f2c <memset+0x4>

08003f38 <iprintf>:
 8003f38:	b40f      	push	{r0, r1, r2, r3}
 8003f3a:	4b0a      	ldr	r3, [pc, #40]	; (8003f64 <iprintf+0x2c>)
 8003f3c:	b513      	push	{r0, r1, r4, lr}
 8003f3e:	681c      	ldr	r4, [r3, #0]
 8003f40:	b124      	cbz	r4, 8003f4c <iprintf+0x14>
 8003f42:	69a3      	ldr	r3, [r4, #24]
 8003f44:	b913      	cbnz	r3, 8003f4c <iprintf+0x14>
 8003f46:	4620      	mov	r0, r4
 8003f48:	f000 fa7e 	bl	8004448 <__sinit>
 8003f4c:	ab05      	add	r3, sp, #20
 8003f4e:	9a04      	ldr	r2, [sp, #16]
 8003f50:	68a1      	ldr	r1, [r4, #8]
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 fdab 	bl	8004ab0 <_vfiprintf_r>
 8003f5a:	b002      	add	sp, #8
 8003f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f60:	b004      	add	sp, #16
 8003f62:	4770      	bx	lr
 8003f64:	2000000c 	.word	0x2000000c

08003f68 <_puts_r>:
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	460e      	mov	r6, r1
 8003f6c:	4605      	mov	r5, r0
 8003f6e:	b118      	cbz	r0, 8003f78 <_puts_r+0x10>
 8003f70:	6983      	ldr	r3, [r0, #24]
 8003f72:	b90b      	cbnz	r3, 8003f78 <_puts_r+0x10>
 8003f74:	f000 fa68 	bl	8004448 <__sinit>
 8003f78:	69ab      	ldr	r3, [r5, #24]
 8003f7a:	68ac      	ldr	r4, [r5, #8]
 8003f7c:	b913      	cbnz	r3, 8003f84 <_puts_r+0x1c>
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 fa62 	bl	8004448 <__sinit>
 8003f84:	4b2c      	ldr	r3, [pc, #176]	; (8004038 <_puts_r+0xd0>)
 8003f86:	429c      	cmp	r4, r3
 8003f88:	d120      	bne.n	8003fcc <_puts_r+0x64>
 8003f8a:	686c      	ldr	r4, [r5, #4]
 8003f8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f8e:	07db      	lsls	r3, r3, #31
 8003f90:	d405      	bmi.n	8003f9e <_puts_r+0x36>
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	0598      	lsls	r0, r3, #22
 8003f96:	d402      	bmi.n	8003f9e <_puts_r+0x36>
 8003f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f9a:	f000 faf3 	bl	8004584 <__retarget_lock_acquire_recursive>
 8003f9e:	89a3      	ldrh	r3, [r4, #12]
 8003fa0:	0719      	lsls	r1, r3, #28
 8003fa2:	d51d      	bpl.n	8003fe0 <_puts_r+0x78>
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	b1db      	cbz	r3, 8003fe0 <_puts_r+0x78>
 8003fa8:	3e01      	subs	r6, #1
 8003faa:	68a3      	ldr	r3, [r4, #8]
 8003fac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	60a3      	str	r3, [r4, #8]
 8003fb4:	bb39      	cbnz	r1, 8004006 <_puts_r+0x9e>
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	da38      	bge.n	800402c <_puts_r+0xc4>
 8003fba:	4622      	mov	r2, r4
 8003fbc:	210a      	movs	r1, #10
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 f868 	bl	8004094 <__swbuf_r>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	d011      	beq.n	8003fec <_puts_r+0x84>
 8003fc8:	250a      	movs	r5, #10
 8003fca:	e011      	b.n	8003ff0 <_puts_r+0x88>
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <_puts_r+0xd4>)
 8003fce:	429c      	cmp	r4, r3
 8003fd0:	d101      	bne.n	8003fd6 <_puts_r+0x6e>
 8003fd2:	68ac      	ldr	r4, [r5, #8]
 8003fd4:	e7da      	b.n	8003f8c <_puts_r+0x24>
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <_puts_r+0xd8>)
 8003fd8:	429c      	cmp	r4, r3
 8003fda:	bf08      	it	eq
 8003fdc:	68ec      	ldreq	r4, [r5, #12]
 8003fde:	e7d5      	b.n	8003f8c <_puts_r+0x24>
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f000 f8a8 	bl	8004138 <__swsetup_r>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d0dd      	beq.n	8003fa8 <_puts_r+0x40>
 8003fec:	f04f 35ff 	mov.w	r5, #4294967295
 8003ff0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ff2:	07da      	lsls	r2, r3, #31
 8003ff4:	d405      	bmi.n	8004002 <_puts_r+0x9a>
 8003ff6:	89a3      	ldrh	r3, [r4, #12]
 8003ff8:	059b      	lsls	r3, r3, #22
 8003ffa:	d402      	bmi.n	8004002 <_puts_r+0x9a>
 8003ffc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ffe:	f000 fac2 	bl	8004586 <__retarget_lock_release_recursive>
 8004002:	4628      	mov	r0, r5
 8004004:	bd70      	pop	{r4, r5, r6, pc}
 8004006:	2b00      	cmp	r3, #0
 8004008:	da04      	bge.n	8004014 <_puts_r+0xac>
 800400a:	69a2      	ldr	r2, [r4, #24]
 800400c:	429a      	cmp	r2, r3
 800400e:	dc06      	bgt.n	800401e <_puts_r+0xb6>
 8004010:	290a      	cmp	r1, #10
 8004012:	d004      	beq.n	800401e <_puts_r+0xb6>
 8004014:	6823      	ldr	r3, [r4, #0]
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	6022      	str	r2, [r4, #0]
 800401a:	7019      	strb	r1, [r3, #0]
 800401c:	e7c5      	b.n	8003faa <_puts_r+0x42>
 800401e:	4622      	mov	r2, r4
 8004020:	4628      	mov	r0, r5
 8004022:	f000 f837 	bl	8004094 <__swbuf_r>
 8004026:	3001      	adds	r0, #1
 8004028:	d1bf      	bne.n	8003faa <_puts_r+0x42>
 800402a:	e7df      	b.n	8003fec <_puts_r+0x84>
 800402c:	6823      	ldr	r3, [r4, #0]
 800402e:	250a      	movs	r5, #10
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	6022      	str	r2, [r4, #0]
 8004034:	701d      	strb	r5, [r3, #0]
 8004036:	e7db      	b.n	8003ff0 <_puts_r+0x88>
 8004038:	08005314 	.word	0x08005314
 800403c:	08005334 	.word	0x08005334
 8004040:	080052f4 	.word	0x080052f4

08004044 <puts>:
 8004044:	4b02      	ldr	r3, [pc, #8]	; (8004050 <puts+0xc>)
 8004046:	4601      	mov	r1, r0
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	f7ff bf8d 	b.w	8003f68 <_puts_r>
 800404e:	bf00      	nop
 8004050:	2000000c 	.word	0x2000000c

08004054 <siprintf>:
 8004054:	b40e      	push	{r1, r2, r3}
 8004056:	b500      	push	{lr}
 8004058:	b09c      	sub	sp, #112	; 0x70
 800405a:	ab1d      	add	r3, sp, #116	; 0x74
 800405c:	9002      	str	r0, [sp, #8]
 800405e:	9006      	str	r0, [sp, #24]
 8004060:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004064:	4809      	ldr	r0, [pc, #36]	; (800408c <siprintf+0x38>)
 8004066:	9107      	str	r1, [sp, #28]
 8004068:	9104      	str	r1, [sp, #16]
 800406a:	4909      	ldr	r1, [pc, #36]	; (8004090 <siprintf+0x3c>)
 800406c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004070:	9105      	str	r1, [sp, #20]
 8004072:	6800      	ldr	r0, [r0, #0]
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	a902      	add	r1, sp, #8
 8004078:	f000 fbf0 	bl	800485c <_svfiprintf_r>
 800407c:	9b02      	ldr	r3, [sp, #8]
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	b01c      	add	sp, #112	; 0x70
 8004084:	f85d eb04 	ldr.w	lr, [sp], #4
 8004088:	b003      	add	sp, #12
 800408a:	4770      	bx	lr
 800408c:	2000000c 	.word	0x2000000c
 8004090:	ffff0208 	.word	0xffff0208

08004094 <__swbuf_r>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	460e      	mov	r6, r1
 8004098:	4614      	mov	r4, r2
 800409a:	4605      	mov	r5, r0
 800409c:	b118      	cbz	r0, 80040a6 <__swbuf_r+0x12>
 800409e:	6983      	ldr	r3, [r0, #24]
 80040a0:	b90b      	cbnz	r3, 80040a6 <__swbuf_r+0x12>
 80040a2:	f000 f9d1 	bl	8004448 <__sinit>
 80040a6:	4b21      	ldr	r3, [pc, #132]	; (800412c <__swbuf_r+0x98>)
 80040a8:	429c      	cmp	r4, r3
 80040aa:	d12b      	bne.n	8004104 <__swbuf_r+0x70>
 80040ac:	686c      	ldr	r4, [r5, #4]
 80040ae:	69a3      	ldr	r3, [r4, #24]
 80040b0:	60a3      	str	r3, [r4, #8]
 80040b2:	89a3      	ldrh	r3, [r4, #12]
 80040b4:	071a      	lsls	r2, r3, #28
 80040b6:	d52f      	bpl.n	8004118 <__swbuf_r+0x84>
 80040b8:	6923      	ldr	r3, [r4, #16]
 80040ba:	b36b      	cbz	r3, 8004118 <__swbuf_r+0x84>
 80040bc:	6923      	ldr	r3, [r4, #16]
 80040be:	6820      	ldr	r0, [r4, #0]
 80040c0:	1ac0      	subs	r0, r0, r3
 80040c2:	6963      	ldr	r3, [r4, #20]
 80040c4:	b2f6      	uxtb	r6, r6
 80040c6:	4283      	cmp	r3, r0
 80040c8:	4637      	mov	r7, r6
 80040ca:	dc04      	bgt.n	80040d6 <__swbuf_r+0x42>
 80040cc:	4621      	mov	r1, r4
 80040ce:	4628      	mov	r0, r5
 80040d0:	f000 f926 	bl	8004320 <_fflush_r>
 80040d4:	bb30      	cbnz	r0, 8004124 <__swbuf_r+0x90>
 80040d6:	68a3      	ldr	r3, [r4, #8]
 80040d8:	3b01      	subs	r3, #1
 80040da:	60a3      	str	r3, [r4, #8]
 80040dc:	6823      	ldr	r3, [r4, #0]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	6022      	str	r2, [r4, #0]
 80040e2:	701e      	strb	r6, [r3, #0]
 80040e4:	6963      	ldr	r3, [r4, #20]
 80040e6:	3001      	adds	r0, #1
 80040e8:	4283      	cmp	r3, r0
 80040ea:	d004      	beq.n	80040f6 <__swbuf_r+0x62>
 80040ec:	89a3      	ldrh	r3, [r4, #12]
 80040ee:	07db      	lsls	r3, r3, #31
 80040f0:	d506      	bpl.n	8004100 <__swbuf_r+0x6c>
 80040f2:	2e0a      	cmp	r6, #10
 80040f4:	d104      	bne.n	8004100 <__swbuf_r+0x6c>
 80040f6:	4621      	mov	r1, r4
 80040f8:	4628      	mov	r0, r5
 80040fa:	f000 f911 	bl	8004320 <_fflush_r>
 80040fe:	b988      	cbnz	r0, 8004124 <__swbuf_r+0x90>
 8004100:	4638      	mov	r0, r7
 8004102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004104:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <__swbuf_r+0x9c>)
 8004106:	429c      	cmp	r4, r3
 8004108:	d101      	bne.n	800410e <__swbuf_r+0x7a>
 800410a:	68ac      	ldr	r4, [r5, #8]
 800410c:	e7cf      	b.n	80040ae <__swbuf_r+0x1a>
 800410e:	4b09      	ldr	r3, [pc, #36]	; (8004134 <__swbuf_r+0xa0>)
 8004110:	429c      	cmp	r4, r3
 8004112:	bf08      	it	eq
 8004114:	68ec      	ldreq	r4, [r5, #12]
 8004116:	e7ca      	b.n	80040ae <__swbuf_r+0x1a>
 8004118:	4621      	mov	r1, r4
 800411a:	4628      	mov	r0, r5
 800411c:	f000 f80c 	bl	8004138 <__swsetup_r>
 8004120:	2800      	cmp	r0, #0
 8004122:	d0cb      	beq.n	80040bc <__swbuf_r+0x28>
 8004124:	f04f 37ff 	mov.w	r7, #4294967295
 8004128:	e7ea      	b.n	8004100 <__swbuf_r+0x6c>
 800412a:	bf00      	nop
 800412c:	08005314 	.word	0x08005314
 8004130:	08005334 	.word	0x08005334
 8004134:	080052f4 	.word	0x080052f4

08004138 <__swsetup_r>:
 8004138:	4b32      	ldr	r3, [pc, #200]	; (8004204 <__swsetup_r+0xcc>)
 800413a:	b570      	push	{r4, r5, r6, lr}
 800413c:	681d      	ldr	r5, [r3, #0]
 800413e:	4606      	mov	r6, r0
 8004140:	460c      	mov	r4, r1
 8004142:	b125      	cbz	r5, 800414e <__swsetup_r+0x16>
 8004144:	69ab      	ldr	r3, [r5, #24]
 8004146:	b913      	cbnz	r3, 800414e <__swsetup_r+0x16>
 8004148:	4628      	mov	r0, r5
 800414a:	f000 f97d 	bl	8004448 <__sinit>
 800414e:	4b2e      	ldr	r3, [pc, #184]	; (8004208 <__swsetup_r+0xd0>)
 8004150:	429c      	cmp	r4, r3
 8004152:	d10f      	bne.n	8004174 <__swsetup_r+0x3c>
 8004154:	686c      	ldr	r4, [r5, #4]
 8004156:	89a3      	ldrh	r3, [r4, #12]
 8004158:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800415c:	0719      	lsls	r1, r3, #28
 800415e:	d42c      	bmi.n	80041ba <__swsetup_r+0x82>
 8004160:	06dd      	lsls	r5, r3, #27
 8004162:	d411      	bmi.n	8004188 <__swsetup_r+0x50>
 8004164:	2309      	movs	r3, #9
 8004166:	6033      	str	r3, [r6, #0]
 8004168:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800416c:	81a3      	strh	r3, [r4, #12]
 800416e:	f04f 30ff 	mov.w	r0, #4294967295
 8004172:	e03e      	b.n	80041f2 <__swsetup_r+0xba>
 8004174:	4b25      	ldr	r3, [pc, #148]	; (800420c <__swsetup_r+0xd4>)
 8004176:	429c      	cmp	r4, r3
 8004178:	d101      	bne.n	800417e <__swsetup_r+0x46>
 800417a:	68ac      	ldr	r4, [r5, #8]
 800417c:	e7eb      	b.n	8004156 <__swsetup_r+0x1e>
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <__swsetup_r+0xd8>)
 8004180:	429c      	cmp	r4, r3
 8004182:	bf08      	it	eq
 8004184:	68ec      	ldreq	r4, [r5, #12]
 8004186:	e7e6      	b.n	8004156 <__swsetup_r+0x1e>
 8004188:	0758      	lsls	r0, r3, #29
 800418a:	d512      	bpl.n	80041b2 <__swsetup_r+0x7a>
 800418c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800418e:	b141      	cbz	r1, 80041a2 <__swsetup_r+0x6a>
 8004190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004194:	4299      	cmp	r1, r3
 8004196:	d002      	beq.n	800419e <__swsetup_r+0x66>
 8004198:	4630      	mov	r0, r6
 800419a:	f000 fa59 	bl	8004650 <_free_r>
 800419e:	2300      	movs	r3, #0
 80041a0:	6363      	str	r3, [r4, #52]	; 0x34
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041a8:	81a3      	strh	r3, [r4, #12]
 80041aa:	2300      	movs	r3, #0
 80041ac:	6063      	str	r3, [r4, #4]
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	f043 0308 	orr.w	r3, r3, #8
 80041b8:	81a3      	strh	r3, [r4, #12]
 80041ba:	6923      	ldr	r3, [r4, #16]
 80041bc:	b94b      	cbnz	r3, 80041d2 <__swsetup_r+0x9a>
 80041be:	89a3      	ldrh	r3, [r4, #12]
 80041c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c8:	d003      	beq.n	80041d2 <__swsetup_r+0x9a>
 80041ca:	4621      	mov	r1, r4
 80041cc:	4630      	mov	r0, r6
 80041ce:	f000 f9ff 	bl	80045d0 <__smakebuf_r>
 80041d2:	89a0      	ldrh	r0, [r4, #12]
 80041d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041d8:	f010 0301 	ands.w	r3, r0, #1
 80041dc:	d00a      	beq.n	80041f4 <__swsetup_r+0xbc>
 80041de:	2300      	movs	r3, #0
 80041e0:	60a3      	str	r3, [r4, #8]
 80041e2:	6963      	ldr	r3, [r4, #20]
 80041e4:	425b      	negs	r3, r3
 80041e6:	61a3      	str	r3, [r4, #24]
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	b943      	cbnz	r3, 80041fe <__swsetup_r+0xc6>
 80041ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80041f0:	d1ba      	bne.n	8004168 <__swsetup_r+0x30>
 80041f2:	bd70      	pop	{r4, r5, r6, pc}
 80041f4:	0781      	lsls	r1, r0, #30
 80041f6:	bf58      	it	pl
 80041f8:	6963      	ldrpl	r3, [r4, #20]
 80041fa:	60a3      	str	r3, [r4, #8]
 80041fc:	e7f4      	b.n	80041e8 <__swsetup_r+0xb0>
 80041fe:	2000      	movs	r0, #0
 8004200:	e7f7      	b.n	80041f2 <__swsetup_r+0xba>
 8004202:	bf00      	nop
 8004204:	2000000c 	.word	0x2000000c
 8004208:	08005314 	.word	0x08005314
 800420c:	08005334 	.word	0x08005334
 8004210:	080052f4 	.word	0x080052f4

08004214 <__sflush_r>:
 8004214:	898a      	ldrh	r2, [r1, #12]
 8004216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800421a:	4605      	mov	r5, r0
 800421c:	0710      	lsls	r0, r2, #28
 800421e:	460c      	mov	r4, r1
 8004220:	d458      	bmi.n	80042d4 <__sflush_r+0xc0>
 8004222:	684b      	ldr	r3, [r1, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	dc05      	bgt.n	8004234 <__sflush_r+0x20>
 8004228:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	dc02      	bgt.n	8004234 <__sflush_r+0x20>
 800422e:	2000      	movs	r0, #0
 8004230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004234:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004236:	2e00      	cmp	r6, #0
 8004238:	d0f9      	beq.n	800422e <__sflush_r+0x1a>
 800423a:	2300      	movs	r3, #0
 800423c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004240:	682f      	ldr	r7, [r5, #0]
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	d032      	beq.n	80042ac <__sflush_r+0x98>
 8004246:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004248:	89a3      	ldrh	r3, [r4, #12]
 800424a:	075a      	lsls	r2, r3, #29
 800424c:	d505      	bpl.n	800425a <__sflush_r+0x46>
 800424e:	6863      	ldr	r3, [r4, #4]
 8004250:	1ac0      	subs	r0, r0, r3
 8004252:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004254:	b10b      	cbz	r3, 800425a <__sflush_r+0x46>
 8004256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004258:	1ac0      	subs	r0, r0, r3
 800425a:	2300      	movs	r3, #0
 800425c:	4602      	mov	r2, r0
 800425e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004260:	6a21      	ldr	r1, [r4, #32]
 8004262:	4628      	mov	r0, r5
 8004264:	47b0      	blx	r6
 8004266:	1c43      	adds	r3, r0, #1
 8004268:	89a3      	ldrh	r3, [r4, #12]
 800426a:	d106      	bne.n	800427a <__sflush_r+0x66>
 800426c:	6829      	ldr	r1, [r5, #0]
 800426e:	291d      	cmp	r1, #29
 8004270:	d82c      	bhi.n	80042cc <__sflush_r+0xb8>
 8004272:	4a2a      	ldr	r2, [pc, #168]	; (800431c <__sflush_r+0x108>)
 8004274:	40ca      	lsrs	r2, r1
 8004276:	07d6      	lsls	r6, r2, #31
 8004278:	d528      	bpl.n	80042cc <__sflush_r+0xb8>
 800427a:	2200      	movs	r2, #0
 800427c:	6062      	str	r2, [r4, #4]
 800427e:	04d9      	lsls	r1, r3, #19
 8004280:	6922      	ldr	r2, [r4, #16]
 8004282:	6022      	str	r2, [r4, #0]
 8004284:	d504      	bpl.n	8004290 <__sflush_r+0x7c>
 8004286:	1c42      	adds	r2, r0, #1
 8004288:	d101      	bne.n	800428e <__sflush_r+0x7a>
 800428a:	682b      	ldr	r3, [r5, #0]
 800428c:	b903      	cbnz	r3, 8004290 <__sflush_r+0x7c>
 800428e:	6560      	str	r0, [r4, #84]	; 0x54
 8004290:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004292:	602f      	str	r7, [r5, #0]
 8004294:	2900      	cmp	r1, #0
 8004296:	d0ca      	beq.n	800422e <__sflush_r+0x1a>
 8004298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800429c:	4299      	cmp	r1, r3
 800429e:	d002      	beq.n	80042a6 <__sflush_r+0x92>
 80042a0:	4628      	mov	r0, r5
 80042a2:	f000 f9d5 	bl	8004650 <_free_r>
 80042a6:	2000      	movs	r0, #0
 80042a8:	6360      	str	r0, [r4, #52]	; 0x34
 80042aa:	e7c1      	b.n	8004230 <__sflush_r+0x1c>
 80042ac:	6a21      	ldr	r1, [r4, #32]
 80042ae:	2301      	movs	r3, #1
 80042b0:	4628      	mov	r0, r5
 80042b2:	47b0      	blx	r6
 80042b4:	1c41      	adds	r1, r0, #1
 80042b6:	d1c7      	bne.n	8004248 <__sflush_r+0x34>
 80042b8:	682b      	ldr	r3, [r5, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0c4      	beq.n	8004248 <__sflush_r+0x34>
 80042be:	2b1d      	cmp	r3, #29
 80042c0:	d001      	beq.n	80042c6 <__sflush_r+0xb2>
 80042c2:	2b16      	cmp	r3, #22
 80042c4:	d101      	bne.n	80042ca <__sflush_r+0xb6>
 80042c6:	602f      	str	r7, [r5, #0]
 80042c8:	e7b1      	b.n	800422e <__sflush_r+0x1a>
 80042ca:	89a3      	ldrh	r3, [r4, #12]
 80042cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d0:	81a3      	strh	r3, [r4, #12]
 80042d2:	e7ad      	b.n	8004230 <__sflush_r+0x1c>
 80042d4:	690f      	ldr	r7, [r1, #16]
 80042d6:	2f00      	cmp	r7, #0
 80042d8:	d0a9      	beq.n	800422e <__sflush_r+0x1a>
 80042da:	0793      	lsls	r3, r2, #30
 80042dc:	680e      	ldr	r6, [r1, #0]
 80042de:	bf08      	it	eq
 80042e0:	694b      	ldreq	r3, [r1, #20]
 80042e2:	600f      	str	r7, [r1, #0]
 80042e4:	bf18      	it	ne
 80042e6:	2300      	movne	r3, #0
 80042e8:	eba6 0807 	sub.w	r8, r6, r7
 80042ec:	608b      	str	r3, [r1, #8]
 80042ee:	f1b8 0f00 	cmp.w	r8, #0
 80042f2:	dd9c      	ble.n	800422e <__sflush_r+0x1a>
 80042f4:	6a21      	ldr	r1, [r4, #32]
 80042f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80042f8:	4643      	mov	r3, r8
 80042fa:	463a      	mov	r2, r7
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b0      	blx	r6
 8004300:	2800      	cmp	r0, #0
 8004302:	dc06      	bgt.n	8004312 <__sflush_r+0xfe>
 8004304:	89a3      	ldrh	r3, [r4, #12]
 8004306:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800430a:	81a3      	strh	r3, [r4, #12]
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	e78e      	b.n	8004230 <__sflush_r+0x1c>
 8004312:	4407      	add	r7, r0
 8004314:	eba8 0800 	sub.w	r8, r8, r0
 8004318:	e7e9      	b.n	80042ee <__sflush_r+0xda>
 800431a:	bf00      	nop
 800431c:	20400001 	.word	0x20400001

08004320 <_fflush_r>:
 8004320:	b538      	push	{r3, r4, r5, lr}
 8004322:	690b      	ldr	r3, [r1, #16]
 8004324:	4605      	mov	r5, r0
 8004326:	460c      	mov	r4, r1
 8004328:	b913      	cbnz	r3, 8004330 <_fflush_r+0x10>
 800432a:	2500      	movs	r5, #0
 800432c:	4628      	mov	r0, r5
 800432e:	bd38      	pop	{r3, r4, r5, pc}
 8004330:	b118      	cbz	r0, 800433a <_fflush_r+0x1a>
 8004332:	6983      	ldr	r3, [r0, #24]
 8004334:	b90b      	cbnz	r3, 800433a <_fflush_r+0x1a>
 8004336:	f000 f887 	bl	8004448 <__sinit>
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <_fflush_r+0x6c>)
 800433c:	429c      	cmp	r4, r3
 800433e:	d11b      	bne.n	8004378 <_fflush_r+0x58>
 8004340:	686c      	ldr	r4, [r5, #4]
 8004342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0ef      	beq.n	800432a <_fflush_r+0xa>
 800434a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800434c:	07d0      	lsls	r0, r2, #31
 800434e:	d404      	bmi.n	800435a <_fflush_r+0x3a>
 8004350:	0599      	lsls	r1, r3, #22
 8004352:	d402      	bmi.n	800435a <_fflush_r+0x3a>
 8004354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004356:	f000 f915 	bl	8004584 <__retarget_lock_acquire_recursive>
 800435a:	4628      	mov	r0, r5
 800435c:	4621      	mov	r1, r4
 800435e:	f7ff ff59 	bl	8004214 <__sflush_r>
 8004362:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004364:	07da      	lsls	r2, r3, #31
 8004366:	4605      	mov	r5, r0
 8004368:	d4e0      	bmi.n	800432c <_fflush_r+0xc>
 800436a:	89a3      	ldrh	r3, [r4, #12]
 800436c:	059b      	lsls	r3, r3, #22
 800436e:	d4dd      	bmi.n	800432c <_fflush_r+0xc>
 8004370:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004372:	f000 f908 	bl	8004586 <__retarget_lock_release_recursive>
 8004376:	e7d9      	b.n	800432c <_fflush_r+0xc>
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <_fflush_r+0x70>)
 800437a:	429c      	cmp	r4, r3
 800437c:	d101      	bne.n	8004382 <_fflush_r+0x62>
 800437e:	68ac      	ldr	r4, [r5, #8]
 8004380:	e7df      	b.n	8004342 <_fflush_r+0x22>
 8004382:	4b04      	ldr	r3, [pc, #16]	; (8004394 <_fflush_r+0x74>)
 8004384:	429c      	cmp	r4, r3
 8004386:	bf08      	it	eq
 8004388:	68ec      	ldreq	r4, [r5, #12]
 800438a:	e7da      	b.n	8004342 <_fflush_r+0x22>
 800438c:	08005314 	.word	0x08005314
 8004390:	08005334 	.word	0x08005334
 8004394:	080052f4 	.word	0x080052f4

08004398 <std>:
 8004398:	2300      	movs	r3, #0
 800439a:	b510      	push	{r4, lr}
 800439c:	4604      	mov	r4, r0
 800439e:	e9c0 3300 	strd	r3, r3, [r0]
 80043a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80043a6:	6083      	str	r3, [r0, #8]
 80043a8:	8181      	strh	r1, [r0, #12]
 80043aa:	6643      	str	r3, [r0, #100]	; 0x64
 80043ac:	81c2      	strh	r2, [r0, #14]
 80043ae:	6183      	str	r3, [r0, #24]
 80043b0:	4619      	mov	r1, r3
 80043b2:	2208      	movs	r2, #8
 80043b4:	305c      	adds	r0, #92	; 0x5c
 80043b6:	f7ff fdb7 	bl	8003f28 <memset>
 80043ba:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <std+0x38>)
 80043bc:	6263      	str	r3, [r4, #36]	; 0x24
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <std+0x3c>)
 80043c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <std+0x40>)
 80043c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043c6:	4b05      	ldr	r3, [pc, #20]	; (80043dc <std+0x44>)
 80043c8:	6224      	str	r4, [r4, #32]
 80043ca:	6323      	str	r3, [r4, #48]	; 0x30
 80043cc:	bd10      	pop	{r4, pc}
 80043ce:	bf00      	nop
 80043d0:	08005059 	.word	0x08005059
 80043d4:	0800507b 	.word	0x0800507b
 80043d8:	080050b3 	.word	0x080050b3
 80043dc:	080050d7 	.word	0x080050d7

080043e0 <_cleanup_r>:
 80043e0:	4901      	ldr	r1, [pc, #4]	; (80043e8 <_cleanup_r+0x8>)
 80043e2:	f000 b8af 	b.w	8004544 <_fwalk_reent>
 80043e6:	bf00      	nop
 80043e8:	08004321 	.word	0x08004321

080043ec <__sfmoreglue>:
 80043ec:	b570      	push	{r4, r5, r6, lr}
 80043ee:	1e4a      	subs	r2, r1, #1
 80043f0:	2568      	movs	r5, #104	; 0x68
 80043f2:	4355      	muls	r5, r2
 80043f4:	460e      	mov	r6, r1
 80043f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80043fa:	f000 f979 	bl	80046f0 <_malloc_r>
 80043fe:	4604      	mov	r4, r0
 8004400:	b140      	cbz	r0, 8004414 <__sfmoreglue+0x28>
 8004402:	2100      	movs	r1, #0
 8004404:	e9c0 1600 	strd	r1, r6, [r0]
 8004408:	300c      	adds	r0, #12
 800440a:	60a0      	str	r0, [r4, #8]
 800440c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004410:	f7ff fd8a 	bl	8003f28 <memset>
 8004414:	4620      	mov	r0, r4
 8004416:	bd70      	pop	{r4, r5, r6, pc}

08004418 <__sfp_lock_acquire>:
 8004418:	4801      	ldr	r0, [pc, #4]	; (8004420 <__sfp_lock_acquire+0x8>)
 800441a:	f000 b8b3 	b.w	8004584 <__retarget_lock_acquire_recursive>
 800441e:	bf00      	nop
 8004420:	2000025c 	.word	0x2000025c

08004424 <__sfp_lock_release>:
 8004424:	4801      	ldr	r0, [pc, #4]	; (800442c <__sfp_lock_release+0x8>)
 8004426:	f000 b8ae 	b.w	8004586 <__retarget_lock_release_recursive>
 800442a:	bf00      	nop
 800442c:	2000025c 	.word	0x2000025c

08004430 <__sinit_lock_acquire>:
 8004430:	4801      	ldr	r0, [pc, #4]	; (8004438 <__sinit_lock_acquire+0x8>)
 8004432:	f000 b8a7 	b.w	8004584 <__retarget_lock_acquire_recursive>
 8004436:	bf00      	nop
 8004438:	20000257 	.word	0x20000257

0800443c <__sinit_lock_release>:
 800443c:	4801      	ldr	r0, [pc, #4]	; (8004444 <__sinit_lock_release+0x8>)
 800443e:	f000 b8a2 	b.w	8004586 <__retarget_lock_release_recursive>
 8004442:	bf00      	nop
 8004444:	20000257 	.word	0x20000257

08004448 <__sinit>:
 8004448:	b510      	push	{r4, lr}
 800444a:	4604      	mov	r4, r0
 800444c:	f7ff fff0 	bl	8004430 <__sinit_lock_acquire>
 8004450:	69a3      	ldr	r3, [r4, #24]
 8004452:	b11b      	cbz	r3, 800445c <__sinit+0x14>
 8004454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004458:	f7ff bff0 	b.w	800443c <__sinit_lock_release>
 800445c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004460:	6523      	str	r3, [r4, #80]	; 0x50
 8004462:	4b13      	ldr	r3, [pc, #76]	; (80044b0 <__sinit+0x68>)
 8004464:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <__sinit+0x6c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	62a2      	str	r2, [r4, #40]	; 0x28
 800446a:	42a3      	cmp	r3, r4
 800446c:	bf04      	itt	eq
 800446e:	2301      	moveq	r3, #1
 8004470:	61a3      	streq	r3, [r4, #24]
 8004472:	4620      	mov	r0, r4
 8004474:	f000 f820 	bl	80044b8 <__sfp>
 8004478:	6060      	str	r0, [r4, #4]
 800447a:	4620      	mov	r0, r4
 800447c:	f000 f81c 	bl	80044b8 <__sfp>
 8004480:	60a0      	str	r0, [r4, #8]
 8004482:	4620      	mov	r0, r4
 8004484:	f000 f818 	bl	80044b8 <__sfp>
 8004488:	2200      	movs	r2, #0
 800448a:	60e0      	str	r0, [r4, #12]
 800448c:	2104      	movs	r1, #4
 800448e:	6860      	ldr	r0, [r4, #4]
 8004490:	f7ff ff82 	bl	8004398 <std>
 8004494:	68a0      	ldr	r0, [r4, #8]
 8004496:	2201      	movs	r2, #1
 8004498:	2109      	movs	r1, #9
 800449a:	f7ff ff7d 	bl	8004398 <std>
 800449e:	68e0      	ldr	r0, [r4, #12]
 80044a0:	2202      	movs	r2, #2
 80044a2:	2112      	movs	r1, #18
 80044a4:	f7ff ff78 	bl	8004398 <std>
 80044a8:	2301      	movs	r3, #1
 80044aa:	61a3      	str	r3, [r4, #24]
 80044ac:	e7d2      	b.n	8004454 <__sinit+0xc>
 80044ae:	bf00      	nop
 80044b0:	080052f0 	.word	0x080052f0
 80044b4:	080043e1 	.word	0x080043e1

080044b8 <__sfp>:
 80044b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ba:	4607      	mov	r7, r0
 80044bc:	f7ff ffac 	bl	8004418 <__sfp_lock_acquire>
 80044c0:	4b1e      	ldr	r3, [pc, #120]	; (800453c <__sfp+0x84>)
 80044c2:	681e      	ldr	r6, [r3, #0]
 80044c4:	69b3      	ldr	r3, [r6, #24]
 80044c6:	b913      	cbnz	r3, 80044ce <__sfp+0x16>
 80044c8:	4630      	mov	r0, r6
 80044ca:	f7ff ffbd 	bl	8004448 <__sinit>
 80044ce:	3648      	adds	r6, #72	; 0x48
 80044d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80044d4:	3b01      	subs	r3, #1
 80044d6:	d503      	bpl.n	80044e0 <__sfp+0x28>
 80044d8:	6833      	ldr	r3, [r6, #0]
 80044da:	b30b      	cbz	r3, 8004520 <__sfp+0x68>
 80044dc:	6836      	ldr	r6, [r6, #0]
 80044de:	e7f7      	b.n	80044d0 <__sfp+0x18>
 80044e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80044e4:	b9d5      	cbnz	r5, 800451c <__sfp+0x64>
 80044e6:	4b16      	ldr	r3, [pc, #88]	; (8004540 <__sfp+0x88>)
 80044e8:	60e3      	str	r3, [r4, #12]
 80044ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044ee:	6665      	str	r5, [r4, #100]	; 0x64
 80044f0:	f000 f847 	bl	8004582 <__retarget_lock_init_recursive>
 80044f4:	f7ff ff96 	bl	8004424 <__sfp_lock_release>
 80044f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80044fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004500:	6025      	str	r5, [r4, #0]
 8004502:	61a5      	str	r5, [r4, #24]
 8004504:	2208      	movs	r2, #8
 8004506:	4629      	mov	r1, r5
 8004508:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800450c:	f7ff fd0c 	bl	8003f28 <memset>
 8004510:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004514:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004518:	4620      	mov	r0, r4
 800451a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800451c:	3468      	adds	r4, #104	; 0x68
 800451e:	e7d9      	b.n	80044d4 <__sfp+0x1c>
 8004520:	2104      	movs	r1, #4
 8004522:	4638      	mov	r0, r7
 8004524:	f7ff ff62 	bl	80043ec <__sfmoreglue>
 8004528:	4604      	mov	r4, r0
 800452a:	6030      	str	r0, [r6, #0]
 800452c:	2800      	cmp	r0, #0
 800452e:	d1d5      	bne.n	80044dc <__sfp+0x24>
 8004530:	f7ff ff78 	bl	8004424 <__sfp_lock_release>
 8004534:	230c      	movs	r3, #12
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	e7ee      	b.n	8004518 <__sfp+0x60>
 800453a:	bf00      	nop
 800453c:	080052f0 	.word	0x080052f0
 8004540:	ffff0001 	.word	0xffff0001

08004544 <_fwalk_reent>:
 8004544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004548:	4606      	mov	r6, r0
 800454a:	4688      	mov	r8, r1
 800454c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004550:	2700      	movs	r7, #0
 8004552:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004556:	f1b9 0901 	subs.w	r9, r9, #1
 800455a:	d505      	bpl.n	8004568 <_fwalk_reent+0x24>
 800455c:	6824      	ldr	r4, [r4, #0]
 800455e:	2c00      	cmp	r4, #0
 8004560:	d1f7      	bne.n	8004552 <_fwalk_reent+0xe>
 8004562:	4638      	mov	r0, r7
 8004564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004568:	89ab      	ldrh	r3, [r5, #12]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d907      	bls.n	800457e <_fwalk_reent+0x3a>
 800456e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004572:	3301      	adds	r3, #1
 8004574:	d003      	beq.n	800457e <_fwalk_reent+0x3a>
 8004576:	4629      	mov	r1, r5
 8004578:	4630      	mov	r0, r6
 800457a:	47c0      	blx	r8
 800457c:	4307      	orrs	r7, r0
 800457e:	3568      	adds	r5, #104	; 0x68
 8004580:	e7e9      	b.n	8004556 <_fwalk_reent+0x12>

08004582 <__retarget_lock_init_recursive>:
 8004582:	4770      	bx	lr

08004584 <__retarget_lock_acquire_recursive>:
 8004584:	4770      	bx	lr

08004586 <__retarget_lock_release_recursive>:
 8004586:	4770      	bx	lr

08004588 <__swhatbuf_r>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	460e      	mov	r6, r1
 800458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004590:	2900      	cmp	r1, #0
 8004592:	b096      	sub	sp, #88	; 0x58
 8004594:	4614      	mov	r4, r2
 8004596:	461d      	mov	r5, r3
 8004598:	da07      	bge.n	80045aa <__swhatbuf_r+0x22>
 800459a:	2300      	movs	r3, #0
 800459c:	602b      	str	r3, [r5, #0]
 800459e:	89b3      	ldrh	r3, [r6, #12]
 80045a0:	061a      	lsls	r2, r3, #24
 80045a2:	d410      	bmi.n	80045c6 <__swhatbuf_r+0x3e>
 80045a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045a8:	e00e      	b.n	80045c8 <__swhatbuf_r+0x40>
 80045aa:	466a      	mov	r2, sp
 80045ac:	f000 fdba 	bl	8005124 <_fstat_r>
 80045b0:	2800      	cmp	r0, #0
 80045b2:	dbf2      	blt.n	800459a <__swhatbuf_r+0x12>
 80045b4:	9a01      	ldr	r2, [sp, #4]
 80045b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80045ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80045be:	425a      	negs	r2, r3
 80045c0:	415a      	adcs	r2, r3
 80045c2:	602a      	str	r2, [r5, #0]
 80045c4:	e7ee      	b.n	80045a4 <__swhatbuf_r+0x1c>
 80045c6:	2340      	movs	r3, #64	; 0x40
 80045c8:	2000      	movs	r0, #0
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	b016      	add	sp, #88	; 0x58
 80045ce:	bd70      	pop	{r4, r5, r6, pc}

080045d0 <__smakebuf_r>:
 80045d0:	898b      	ldrh	r3, [r1, #12]
 80045d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80045d4:	079d      	lsls	r5, r3, #30
 80045d6:	4606      	mov	r6, r0
 80045d8:	460c      	mov	r4, r1
 80045da:	d507      	bpl.n	80045ec <__smakebuf_r+0x1c>
 80045dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	6123      	str	r3, [r4, #16]
 80045e4:	2301      	movs	r3, #1
 80045e6:	6163      	str	r3, [r4, #20]
 80045e8:	b002      	add	sp, #8
 80045ea:	bd70      	pop	{r4, r5, r6, pc}
 80045ec:	ab01      	add	r3, sp, #4
 80045ee:	466a      	mov	r2, sp
 80045f0:	f7ff ffca 	bl	8004588 <__swhatbuf_r>
 80045f4:	9900      	ldr	r1, [sp, #0]
 80045f6:	4605      	mov	r5, r0
 80045f8:	4630      	mov	r0, r6
 80045fa:	f000 f879 	bl	80046f0 <_malloc_r>
 80045fe:	b948      	cbnz	r0, 8004614 <__smakebuf_r+0x44>
 8004600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004604:	059a      	lsls	r2, r3, #22
 8004606:	d4ef      	bmi.n	80045e8 <__smakebuf_r+0x18>
 8004608:	f023 0303 	bic.w	r3, r3, #3
 800460c:	f043 0302 	orr.w	r3, r3, #2
 8004610:	81a3      	strh	r3, [r4, #12]
 8004612:	e7e3      	b.n	80045dc <__smakebuf_r+0xc>
 8004614:	4b0d      	ldr	r3, [pc, #52]	; (800464c <__smakebuf_r+0x7c>)
 8004616:	62b3      	str	r3, [r6, #40]	; 0x28
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	6020      	str	r0, [r4, #0]
 800461c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004620:	81a3      	strh	r3, [r4, #12]
 8004622:	9b00      	ldr	r3, [sp, #0]
 8004624:	6163      	str	r3, [r4, #20]
 8004626:	9b01      	ldr	r3, [sp, #4]
 8004628:	6120      	str	r0, [r4, #16]
 800462a:	b15b      	cbz	r3, 8004644 <__smakebuf_r+0x74>
 800462c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004630:	4630      	mov	r0, r6
 8004632:	f000 fd89 	bl	8005148 <_isatty_r>
 8004636:	b128      	cbz	r0, 8004644 <__smakebuf_r+0x74>
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	f023 0303 	bic.w	r3, r3, #3
 800463e:	f043 0301 	orr.w	r3, r3, #1
 8004642:	81a3      	strh	r3, [r4, #12]
 8004644:	89a0      	ldrh	r0, [r4, #12]
 8004646:	4305      	orrs	r5, r0
 8004648:	81a5      	strh	r5, [r4, #12]
 800464a:	e7cd      	b.n	80045e8 <__smakebuf_r+0x18>
 800464c:	080043e1 	.word	0x080043e1

08004650 <_free_r>:
 8004650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004652:	2900      	cmp	r1, #0
 8004654:	d048      	beq.n	80046e8 <_free_r+0x98>
 8004656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800465a:	9001      	str	r0, [sp, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f1a1 0404 	sub.w	r4, r1, #4
 8004662:	bfb8      	it	lt
 8004664:	18e4      	addlt	r4, r4, r3
 8004666:	f000 fdb9 	bl	80051dc <__malloc_lock>
 800466a:	4a20      	ldr	r2, [pc, #128]	; (80046ec <_free_r+0x9c>)
 800466c:	9801      	ldr	r0, [sp, #4]
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	4615      	mov	r5, r2
 8004672:	b933      	cbnz	r3, 8004682 <_free_r+0x32>
 8004674:	6063      	str	r3, [r4, #4]
 8004676:	6014      	str	r4, [r2, #0]
 8004678:	b003      	add	sp, #12
 800467a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800467e:	f000 bdb3 	b.w	80051e8 <__malloc_unlock>
 8004682:	42a3      	cmp	r3, r4
 8004684:	d90b      	bls.n	800469e <_free_r+0x4e>
 8004686:	6821      	ldr	r1, [r4, #0]
 8004688:	1862      	adds	r2, r4, r1
 800468a:	4293      	cmp	r3, r2
 800468c:	bf04      	itt	eq
 800468e:	681a      	ldreq	r2, [r3, #0]
 8004690:	685b      	ldreq	r3, [r3, #4]
 8004692:	6063      	str	r3, [r4, #4]
 8004694:	bf04      	itt	eq
 8004696:	1852      	addeq	r2, r2, r1
 8004698:	6022      	streq	r2, [r4, #0]
 800469a:	602c      	str	r4, [r5, #0]
 800469c:	e7ec      	b.n	8004678 <_free_r+0x28>
 800469e:	461a      	mov	r2, r3
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	b10b      	cbz	r3, 80046a8 <_free_r+0x58>
 80046a4:	42a3      	cmp	r3, r4
 80046a6:	d9fa      	bls.n	800469e <_free_r+0x4e>
 80046a8:	6811      	ldr	r1, [r2, #0]
 80046aa:	1855      	adds	r5, r2, r1
 80046ac:	42a5      	cmp	r5, r4
 80046ae:	d10b      	bne.n	80046c8 <_free_r+0x78>
 80046b0:	6824      	ldr	r4, [r4, #0]
 80046b2:	4421      	add	r1, r4
 80046b4:	1854      	adds	r4, r2, r1
 80046b6:	42a3      	cmp	r3, r4
 80046b8:	6011      	str	r1, [r2, #0]
 80046ba:	d1dd      	bne.n	8004678 <_free_r+0x28>
 80046bc:	681c      	ldr	r4, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	6053      	str	r3, [r2, #4]
 80046c2:	4421      	add	r1, r4
 80046c4:	6011      	str	r1, [r2, #0]
 80046c6:	e7d7      	b.n	8004678 <_free_r+0x28>
 80046c8:	d902      	bls.n	80046d0 <_free_r+0x80>
 80046ca:	230c      	movs	r3, #12
 80046cc:	6003      	str	r3, [r0, #0]
 80046ce:	e7d3      	b.n	8004678 <_free_r+0x28>
 80046d0:	6825      	ldr	r5, [r4, #0]
 80046d2:	1961      	adds	r1, r4, r5
 80046d4:	428b      	cmp	r3, r1
 80046d6:	bf04      	itt	eq
 80046d8:	6819      	ldreq	r1, [r3, #0]
 80046da:	685b      	ldreq	r3, [r3, #4]
 80046dc:	6063      	str	r3, [r4, #4]
 80046de:	bf04      	itt	eq
 80046e0:	1949      	addeq	r1, r1, r5
 80046e2:	6021      	streq	r1, [r4, #0]
 80046e4:	6054      	str	r4, [r2, #4]
 80046e6:	e7c7      	b.n	8004678 <_free_r+0x28>
 80046e8:	b003      	add	sp, #12
 80046ea:	bd30      	pop	{r4, r5, pc}
 80046ec:	20000090 	.word	0x20000090

080046f0 <_malloc_r>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	1ccd      	adds	r5, r1, #3
 80046f4:	f025 0503 	bic.w	r5, r5, #3
 80046f8:	3508      	adds	r5, #8
 80046fa:	2d0c      	cmp	r5, #12
 80046fc:	bf38      	it	cc
 80046fe:	250c      	movcc	r5, #12
 8004700:	2d00      	cmp	r5, #0
 8004702:	4606      	mov	r6, r0
 8004704:	db01      	blt.n	800470a <_malloc_r+0x1a>
 8004706:	42a9      	cmp	r1, r5
 8004708:	d903      	bls.n	8004712 <_malloc_r+0x22>
 800470a:	230c      	movs	r3, #12
 800470c:	6033      	str	r3, [r6, #0]
 800470e:	2000      	movs	r0, #0
 8004710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004712:	f000 fd63 	bl	80051dc <__malloc_lock>
 8004716:	4921      	ldr	r1, [pc, #132]	; (800479c <_malloc_r+0xac>)
 8004718:	680a      	ldr	r2, [r1, #0]
 800471a:	4614      	mov	r4, r2
 800471c:	b99c      	cbnz	r4, 8004746 <_malloc_r+0x56>
 800471e:	4f20      	ldr	r7, [pc, #128]	; (80047a0 <_malloc_r+0xb0>)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	b923      	cbnz	r3, 800472e <_malloc_r+0x3e>
 8004724:	4621      	mov	r1, r4
 8004726:	4630      	mov	r0, r6
 8004728:	f000 fc86 	bl	8005038 <_sbrk_r>
 800472c:	6038      	str	r0, [r7, #0]
 800472e:	4629      	mov	r1, r5
 8004730:	4630      	mov	r0, r6
 8004732:	f000 fc81 	bl	8005038 <_sbrk_r>
 8004736:	1c43      	adds	r3, r0, #1
 8004738:	d123      	bne.n	8004782 <_malloc_r+0x92>
 800473a:	230c      	movs	r3, #12
 800473c:	6033      	str	r3, [r6, #0]
 800473e:	4630      	mov	r0, r6
 8004740:	f000 fd52 	bl	80051e8 <__malloc_unlock>
 8004744:	e7e3      	b.n	800470e <_malloc_r+0x1e>
 8004746:	6823      	ldr	r3, [r4, #0]
 8004748:	1b5b      	subs	r3, r3, r5
 800474a:	d417      	bmi.n	800477c <_malloc_r+0x8c>
 800474c:	2b0b      	cmp	r3, #11
 800474e:	d903      	bls.n	8004758 <_malloc_r+0x68>
 8004750:	6023      	str	r3, [r4, #0]
 8004752:	441c      	add	r4, r3
 8004754:	6025      	str	r5, [r4, #0]
 8004756:	e004      	b.n	8004762 <_malloc_r+0x72>
 8004758:	6863      	ldr	r3, [r4, #4]
 800475a:	42a2      	cmp	r2, r4
 800475c:	bf0c      	ite	eq
 800475e:	600b      	streq	r3, [r1, #0]
 8004760:	6053      	strne	r3, [r2, #4]
 8004762:	4630      	mov	r0, r6
 8004764:	f000 fd40 	bl	80051e8 <__malloc_unlock>
 8004768:	f104 000b 	add.w	r0, r4, #11
 800476c:	1d23      	adds	r3, r4, #4
 800476e:	f020 0007 	bic.w	r0, r0, #7
 8004772:	1ac2      	subs	r2, r0, r3
 8004774:	d0cc      	beq.n	8004710 <_malloc_r+0x20>
 8004776:	1a1b      	subs	r3, r3, r0
 8004778:	50a3      	str	r3, [r4, r2]
 800477a:	e7c9      	b.n	8004710 <_malloc_r+0x20>
 800477c:	4622      	mov	r2, r4
 800477e:	6864      	ldr	r4, [r4, #4]
 8004780:	e7cc      	b.n	800471c <_malloc_r+0x2c>
 8004782:	1cc4      	adds	r4, r0, #3
 8004784:	f024 0403 	bic.w	r4, r4, #3
 8004788:	42a0      	cmp	r0, r4
 800478a:	d0e3      	beq.n	8004754 <_malloc_r+0x64>
 800478c:	1a21      	subs	r1, r4, r0
 800478e:	4630      	mov	r0, r6
 8004790:	f000 fc52 	bl	8005038 <_sbrk_r>
 8004794:	3001      	adds	r0, #1
 8004796:	d1dd      	bne.n	8004754 <_malloc_r+0x64>
 8004798:	e7cf      	b.n	800473a <_malloc_r+0x4a>
 800479a:	bf00      	nop
 800479c:	20000090 	.word	0x20000090
 80047a0:	20000094 	.word	0x20000094

080047a4 <__ssputs_r>:
 80047a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	688e      	ldr	r6, [r1, #8]
 80047aa:	429e      	cmp	r6, r3
 80047ac:	4682      	mov	sl, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	4690      	mov	r8, r2
 80047b2:	461f      	mov	r7, r3
 80047b4:	d838      	bhi.n	8004828 <__ssputs_r+0x84>
 80047b6:	898a      	ldrh	r2, [r1, #12]
 80047b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047bc:	d032      	beq.n	8004824 <__ssputs_r+0x80>
 80047be:	6825      	ldr	r5, [r4, #0]
 80047c0:	6909      	ldr	r1, [r1, #16]
 80047c2:	eba5 0901 	sub.w	r9, r5, r1
 80047c6:	6965      	ldr	r5, [r4, #20]
 80047c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047d0:	3301      	adds	r3, #1
 80047d2:	444b      	add	r3, r9
 80047d4:	106d      	asrs	r5, r5, #1
 80047d6:	429d      	cmp	r5, r3
 80047d8:	bf38      	it	cc
 80047da:	461d      	movcc	r5, r3
 80047dc:	0553      	lsls	r3, r2, #21
 80047de:	d531      	bpl.n	8004844 <__ssputs_r+0xa0>
 80047e0:	4629      	mov	r1, r5
 80047e2:	f7ff ff85 	bl	80046f0 <_malloc_r>
 80047e6:	4606      	mov	r6, r0
 80047e8:	b950      	cbnz	r0, 8004800 <__ssputs_r+0x5c>
 80047ea:	230c      	movs	r3, #12
 80047ec:	f8ca 3000 	str.w	r3, [sl]
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	6921      	ldr	r1, [r4, #16]
 8004802:	464a      	mov	r2, r9
 8004804:	f000 fcc2 	bl	800518c <memcpy>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800480e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	6126      	str	r6, [r4, #16]
 8004816:	6165      	str	r5, [r4, #20]
 8004818:	444e      	add	r6, r9
 800481a:	eba5 0509 	sub.w	r5, r5, r9
 800481e:	6026      	str	r6, [r4, #0]
 8004820:	60a5      	str	r5, [r4, #8]
 8004822:	463e      	mov	r6, r7
 8004824:	42be      	cmp	r6, r7
 8004826:	d900      	bls.n	800482a <__ssputs_r+0x86>
 8004828:	463e      	mov	r6, r7
 800482a:	4632      	mov	r2, r6
 800482c:	6820      	ldr	r0, [r4, #0]
 800482e:	4641      	mov	r1, r8
 8004830:	f000 fcba 	bl	80051a8 <memmove>
 8004834:	68a3      	ldr	r3, [r4, #8]
 8004836:	6822      	ldr	r2, [r4, #0]
 8004838:	1b9b      	subs	r3, r3, r6
 800483a:	4432      	add	r2, r6
 800483c:	60a3      	str	r3, [r4, #8]
 800483e:	6022      	str	r2, [r4, #0]
 8004840:	2000      	movs	r0, #0
 8004842:	e7db      	b.n	80047fc <__ssputs_r+0x58>
 8004844:	462a      	mov	r2, r5
 8004846:	f000 fcd5 	bl	80051f4 <_realloc_r>
 800484a:	4606      	mov	r6, r0
 800484c:	2800      	cmp	r0, #0
 800484e:	d1e1      	bne.n	8004814 <__ssputs_r+0x70>
 8004850:	6921      	ldr	r1, [r4, #16]
 8004852:	4650      	mov	r0, sl
 8004854:	f7ff fefc 	bl	8004650 <_free_r>
 8004858:	e7c7      	b.n	80047ea <__ssputs_r+0x46>
	...

0800485c <_svfiprintf_r>:
 800485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	4698      	mov	r8, r3
 8004862:	898b      	ldrh	r3, [r1, #12]
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	b09d      	sub	sp, #116	; 0x74
 8004868:	4607      	mov	r7, r0
 800486a:	460d      	mov	r5, r1
 800486c:	4614      	mov	r4, r2
 800486e:	d50e      	bpl.n	800488e <_svfiprintf_r+0x32>
 8004870:	690b      	ldr	r3, [r1, #16]
 8004872:	b963      	cbnz	r3, 800488e <_svfiprintf_r+0x32>
 8004874:	2140      	movs	r1, #64	; 0x40
 8004876:	f7ff ff3b 	bl	80046f0 <_malloc_r>
 800487a:	6028      	str	r0, [r5, #0]
 800487c:	6128      	str	r0, [r5, #16]
 800487e:	b920      	cbnz	r0, 800488a <_svfiprintf_r+0x2e>
 8004880:	230c      	movs	r3, #12
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	e0d1      	b.n	8004a2e <_svfiprintf_r+0x1d2>
 800488a:	2340      	movs	r3, #64	; 0x40
 800488c:	616b      	str	r3, [r5, #20]
 800488e:	2300      	movs	r3, #0
 8004890:	9309      	str	r3, [sp, #36]	; 0x24
 8004892:	2320      	movs	r3, #32
 8004894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004898:	f8cd 800c 	str.w	r8, [sp, #12]
 800489c:	2330      	movs	r3, #48	; 0x30
 800489e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004a48 <_svfiprintf_r+0x1ec>
 80048a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048a6:	f04f 0901 	mov.w	r9, #1
 80048aa:	4623      	mov	r3, r4
 80048ac:	469a      	mov	sl, r3
 80048ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048b2:	b10a      	cbz	r2, 80048b8 <_svfiprintf_r+0x5c>
 80048b4:	2a25      	cmp	r2, #37	; 0x25
 80048b6:	d1f9      	bne.n	80048ac <_svfiprintf_r+0x50>
 80048b8:	ebba 0b04 	subs.w	fp, sl, r4
 80048bc:	d00b      	beq.n	80048d6 <_svfiprintf_r+0x7a>
 80048be:	465b      	mov	r3, fp
 80048c0:	4622      	mov	r2, r4
 80048c2:	4629      	mov	r1, r5
 80048c4:	4638      	mov	r0, r7
 80048c6:	f7ff ff6d 	bl	80047a4 <__ssputs_r>
 80048ca:	3001      	adds	r0, #1
 80048cc:	f000 80aa 	beq.w	8004a24 <_svfiprintf_r+0x1c8>
 80048d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d2:	445a      	add	r2, fp
 80048d4:	9209      	str	r2, [sp, #36]	; 0x24
 80048d6:	f89a 3000 	ldrb.w	r3, [sl]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80a2 	beq.w	8004a24 <_svfiprintf_r+0x1c8>
 80048e0:	2300      	movs	r3, #0
 80048e2:	f04f 32ff 	mov.w	r2, #4294967295
 80048e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ea:	f10a 0a01 	add.w	sl, sl, #1
 80048ee:	9304      	str	r3, [sp, #16]
 80048f0:	9307      	str	r3, [sp, #28]
 80048f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048f6:	931a      	str	r3, [sp, #104]	; 0x68
 80048f8:	4654      	mov	r4, sl
 80048fa:	2205      	movs	r2, #5
 80048fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004900:	4851      	ldr	r0, [pc, #324]	; (8004a48 <_svfiprintf_r+0x1ec>)
 8004902:	f7fb fc85 	bl	8000210 <memchr>
 8004906:	9a04      	ldr	r2, [sp, #16]
 8004908:	b9d8      	cbnz	r0, 8004942 <_svfiprintf_r+0xe6>
 800490a:	06d0      	lsls	r0, r2, #27
 800490c:	bf44      	itt	mi
 800490e:	2320      	movmi	r3, #32
 8004910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004914:	0711      	lsls	r1, r2, #28
 8004916:	bf44      	itt	mi
 8004918:	232b      	movmi	r3, #43	; 0x2b
 800491a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800491e:	f89a 3000 	ldrb.w	r3, [sl]
 8004922:	2b2a      	cmp	r3, #42	; 0x2a
 8004924:	d015      	beq.n	8004952 <_svfiprintf_r+0xf6>
 8004926:	9a07      	ldr	r2, [sp, #28]
 8004928:	4654      	mov	r4, sl
 800492a:	2000      	movs	r0, #0
 800492c:	f04f 0c0a 	mov.w	ip, #10
 8004930:	4621      	mov	r1, r4
 8004932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004936:	3b30      	subs	r3, #48	; 0x30
 8004938:	2b09      	cmp	r3, #9
 800493a:	d94e      	bls.n	80049da <_svfiprintf_r+0x17e>
 800493c:	b1b0      	cbz	r0, 800496c <_svfiprintf_r+0x110>
 800493e:	9207      	str	r2, [sp, #28]
 8004940:	e014      	b.n	800496c <_svfiprintf_r+0x110>
 8004942:	eba0 0308 	sub.w	r3, r0, r8
 8004946:	fa09 f303 	lsl.w	r3, r9, r3
 800494a:	4313      	orrs	r3, r2
 800494c:	9304      	str	r3, [sp, #16]
 800494e:	46a2      	mov	sl, r4
 8004950:	e7d2      	b.n	80048f8 <_svfiprintf_r+0x9c>
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	1d19      	adds	r1, r3, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	9103      	str	r1, [sp, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	bfbb      	ittet	lt
 800495e:	425b      	neglt	r3, r3
 8004960:	f042 0202 	orrlt.w	r2, r2, #2
 8004964:	9307      	strge	r3, [sp, #28]
 8004966:	9307      	strlt	r3, [sp, #28]
 8004968:	bfb8      	it	lt
 800496a:	9204      	strlt	r2, [sp, #16]
 800496c:	7823      	ldrb	r3, [r4, #0]
 800496e:	2b2e      	cmp	r3, #46	; 0x2e
 8004970:	d10c      	bne.n	800498c <_svfiprintf_r+0x130>
 8004972:	7863      	ldrb	r3, [r4, #1]
 8004974:	2b2a      	cmp	r3, #42	; 0x2a
 8004976:	d135      	bne.n	80049e4 <_svfiprintf_r+0x188>
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	1d1a      	adds	r2, r3, #4
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	9203      	str	r2, [sp, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	bfb8      	it	lt
 8004984:	f04f 33ff 	movlt.w	r3, #4294967295
 8004988:	3402      	adds	r4, #2
 800498a:	9305      	str	r3, [sp, #20]
 800498c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a58 <_svfiprintf_r+0x1fc>
 8004990:	7821      	ldrb	r1, [r4, #0]
 8004992:	2203      	movs	r2, #3
 8004994:	4650      	mov	r0, sl
 8004996:	f7fb fc3b 	bl	8000210 <memchr>
 800499a:	b140      	cbz	r0, 80049ae <_svfiprintf_r+0x152>
 800499c:	2340      	movs	r3, #64	; 0x40
 800499e:	eba0 000a 	sub.w	r0, r0, sl
 80049a2:	fa03 f000 	lsl.w	r0, r3, r0
 80049a6:	9b04      	ldr	r3, [sp, #16]
 80049a8:	4303      	orrs	r3, r0
 80049aa:	3401      	adds	r4, #1
 80049ac:	9304      	str	r3, [sp, #16]
 80049ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b2:	4826      	ldr	r0, [pc, #152]	; (8004a4c <_svfiprintf_r+0x1f0>)
 80049b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049b8:	2206      	movs	r2, #6
 80049ba:	f7fb fc29 	bl	8000210 <memchr>
 80049be:	2800      	cmp	r0, #0
 80049c0:	d038      	beq.n	8004a34 <_svfiprintf_r+0x1d8>
 80049c2:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <_svfiprintf_r+0x1f4>)
 80049c4:	bb1b      	cbnz	r3, 8004a0e <_svfiprintf_r+0x1b2>
 80049c6:	9b03      	ldr	r3, [sp, #12]
 80049c8:	3307      	adds	r3, #7
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	3308      	adds	r3, #8
 80049d0:	9303      	str	r3, [sp, #12]
 80049d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d4:	4433      	add	r3, r6
 80049d6:	9309      	str	r3, [sp, #36]	; 0x24
 80049d8:	e767      	b.n	80048aa <_svfiprintf_r+0x4e>
 80049da:	fb0c 3202 	mla	r2, ip, r2, r3
 80049de:	460c      	mov	r4, r1
 80049e0:	2001      	movs	r0, #1
 80049e2:	e7a5      	b.n	8004930 <_svfiprintf_r+0xd4>
 80049e4:	2300      	movs	r3, #0
 80049e6:	3401      	adds	r4, #1
 80049e8:	9305      	str	r3, [sp, #20]
 80049ea:	4619      	mov	r1, r3
 80049ec:	f04f 0c0a 	mov.w	ip, #10
 80049f0:	4620      	mov	r0, r4
 80049f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f6:	3a30      	subs	r2, #48	; 0x30
 80049f8:	2a09      	cmp	r2, #9
 80049fa:	d903      	bls.n	8004a04 <_svfiprintf_r+0x1a8>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0c5      	beq.n	800498c <_svfiprintf_r+0x130>
 8004a00:	9105      	str	r1, [sp, #20]
 8004a02:	e7c3      	b.n	800498c <_svfiprintf_r+0x130>
 8004a04:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a08:	4604      	mov	r4, r0
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e7f0      	b.n	80049f0 <_svfiprintf_r+0x194>
 8004a0e:	ab03      	add	r3, sp, #12
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	462a      	mov	r2, r5
 8004a14:	4b0f      	ldr	r3, [pc, #60]	; (8004a54 <_svfiprintf_r+0x1f8>)
 8004a16:	a904      	add	r1, sp, #16
 8004a18:	4638      	mov	r0, r7
 8004a1a:	f3af 8000 	nop.w
 8004a1e:	1c42      	adds	r2, r0, #1
 8004a20:	4606      	mov	r6, r0
 8004a22:	d1d6      	bne.n	80049d2 <_svfiprintf_r+0x176>
 8004a24:	89ab      	ldrh	r3, [r5, #12]
 8004a26:	065b      	lsls	r3, r3, #25
 8004a28:	f53f af2c 	bmi.w	8004884 <_svfiprintf_r+0x28>
 8004a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a2e:	b01d      	add	sp, #116	; 0x74
 8004a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a34:	ab03      	add	r3, sp, #12
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	462a      	mov	r2, r5
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <_svfiprintf_r+0x1f8>)
 8004a3c:	a904      	add	r1, sp, #16
 8004a3e:	4638      	mov	r0, r7
 8004a40:	f000 f9d4 	bl	8004dec <_printf_i>
 8004a44:	e7eb      	b.n	8004a1e <_svfiprintf_r+0x1c2>
 8004a46:	bf00      	nop
 8004a48:	08005354 	.word	0x08005354
 8004a4c:	0800535e 	.word	0x0800535e
 8004a50:	00000000 	.word	0x00000000
 8004a54:	080047a5 	.word	0x080047a5
 8004a58:	0800535a 	.word	0x0800535a

08004a5c <__sfputc_r>:
 8004a5c:	6893      	ldr	r3, [r2, #8]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	b410      	push	{r4}
 8004a64:	6093      	str	r3, [r2, #8]
 8004a66:	da08      	bge.n	8004a7a <__sfputc_r+0x1e>
 8004a68:	6994      	ldr	r4, [r2, #24]
 8004a6a:	42a3      	cmp	r3, r4
 8004a6c:	db01      	blt.n	8004a72 <__sfputc_r+0x16>
 8004a6e:	290a      	cmp	r1, #10
 8004a70:	d103      	bne.n	8004a7a <__sfputc_r+0x1e>
 8004a72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a76:	f7ff bb0d 	b.w	8004094 <__swbuf_r>
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	1c58      	adds	r0, r3, #1
 8004a7e:	6010      	str	r0, [r2, #0]
 8004a80:	7019      	strb	r1, [r3, #0]
 8004a82:	4608      	mov	r0, r1
 8004a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <__sfputs_r>:
 8004a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8c:	4606      	mov	r6, r0
 8004a8e:	460f      	mov	r7, r1
 8004a90:	4614      	mov	r4, r2
 8004a92:	18d5      	adds	r5, r2, r3
 8004a94:	42ac      	cmp	r4, r5
 8004a96:	d101      	bne.n	8004a9c <__sfputs_r+0x12>
 8004a98:	2000      	movs	r0, #0
 8004a9a:	e007      	b.n	8004aac <__sfputs_r+0x22>
 8004a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa0:	463a      	mov	r2, r7
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f7ff ffda 	bl	8004a5c <__sfputc_r>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	d1f3      	bne.n	8004a94 <__sfputs_r+0xa>
 8004aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ab0 <_vfiprintf_r>:
 8004ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab4:	460d      	mov	r5, r1
 8004ab6:	b09d      	sub	sp, #116	; 0x74
 8004ab8:	4614      	mov	r4, r2
 8004aba:	4698      	mov	r8, r3
 8004abc:	4606      	mov	r6, r0
 8004abe:	b118      	cbz	r0, 8004ac8 <_vfiprintf_r+0x18>
 8004ac0:	6983      	ldr	r3, [r0, #24]
 8004ac2:	b90b      	cbnz	r3, 8004ac8 <_vfiprintf_r+0x18>
 8004ac4:	f7ff fcc0 	bl	8004448 <__sinit>
 8004ac8:	4b89      	ldr	r3, [pc, #548]	; (8004cf0 <_vfiprintf_r+0x240>)
 8004aca:	429d      	cmp	r5, r3
 8004acc:	d11b      	bne.n	8004b06 <_vfiprintf_r+0x56>
 8004ace:	6875      	ldr	r5, [r6, #4]
 8004ad0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ad2:	07d9      	lsls	r1, r3, #31
 8004ad4:	d405      	bmi.n	8004ae2 <_vfiprintf_r+0x32>
 8004ad6:	89ab      	ldrh	r3, [r5, #12]
 8004ad8:	059a      	lsls	r2, r3, #22
 8004ada:	d402      	bmi.n	8004ae2 <_vfiprintf_r+0x32>
 8004adc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ade:	f7ff fd51 	bl	8004584 <__retarget_lock_acquire_recursive>
 8004ae2:	89ab      	ldrh	r3, [r5, #12]
 8004ae4:	071b      	lsls	r3, r3, #28
 8004ae6:	d501      	bpl.n	8004aec <_vfiprintf_r+0x3c>
 8004ae8:	692b      	ldr	r3, [r5, #16]
 8004aea:	b9eb      	cbnz	r3, 8004b28 <_vfiprintf_r+0x78>
 8004aec:	4629      	mov	r1, r5
 8004aee:	4630      	mov	r0, r6
 8004af0:	f7ff fb22 	bl	8004138 <__swsetup_r>
 8004af4:	b1c0      	cbz	r0, 8004b28 <_vfiprintf_r+0x78>
 8004af6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004af8:	07dc      	lsls	r4, r3, #31
 8004afa:	d50e      	bpl.n	8004b1a <_vfiprintf_r+0x6a>
 8004afc:	f04f 30ff 	mov.w	r0, #4294967295
 8004b00:	b01d      	add	sp, #116	; 0x74
 8004b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b06:	4b7b      	ldr	r3, [pc, #492]	; (8004cf4 <_vfiprintf_r+0x244>)
 8004b08:	429d      	cmp	r5, r3
 8004b0a:	d101      	bne.n	8004b10 <_vfiprintf_r+0x60>
 8004b0c:	68b5      	ldr	r5, [r6, #8]
 8004b0e:	e7df      	b.n	8004ad0 <_vfiprintf_r+0x20>
 8004b10:	4b79      	ldr	r3, [pc, #484]	; (8004cf8 <_vfiprintf_r+0x248>)
 8004b12:	429d      	cmp	r5, r3
 8004b14:	bf08      	it	eq
 8004b16:	68f5      	ldreq	r5, [r6, #12]
 8004b18:	e7da      	b.n	8004ad0 <_vfiprintf_r+0x20>
 8004b1a:	89ab      	ldrh	r3, [r5, #12]
 8004b1c:	0598      	lsls	r0, r3, #22
 8004b1e:	d4ed      	bmi.n	8004afc <_vfiprintf_r+0x4c>
 8004b20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b22:	f7ff fd30 	bl	8004586 <__retarget_lock_release_recursive>
 8004b26:	e7e9      	b.n	8004afc <_vfiprintf_r+0x4c>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b2c:	2320      	movs	r3, #32
 8004b2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b36:	2330      	movs	r3, #48	; 0x30
 8004b38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004cfc <_vfiprintf_r+0x24c>
 8004b3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b40:	f04f 0901 	mov.w	r9, #1
 8004b44:	4623      	mov	r3, r4
 8004b46:	469a      	mov	sl, r3
 8004b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b4c:	b10a      	cbz	r2, 8004b52 <_vfiprintf_r+0xa2>
 8004b4e:	2a25      	cmp	r2, #37	; 0x25
 8004b50:	d1f9      	bne.n	8004b46 <_vfiprintf_r+0x96>
 8004b52:	ebba 0b04 	subs.w	fp, sl, r4
 8004b56:	d00b      	beq.n	8004b70 <_vfiprintf_r+0xc0>
 8004b58:	465b      	mov	r3, fp
 8004b5a:	4622      	mov	r2, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	4630      	mov	r0, r6
 8004b60:	f7ff ff93 	bl	8004a8a <__sfputs_r>
 8004b64:	3001      	adds	r0, #1
 8004b66:	f000 80aa 	beq.w	8004cbe <_vfiprintf_r+0x20e>
 8004b6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b6c:	445a      	add	r2, fp
 8004b6e:	9209      	str	r2, [sp, #36]	; 0x24
 8004b70:	f89a 3000 	ldrb.w	r3, [sl]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80a2 	beq.w	8004cbe <_vfiprintf_r+0x20e>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b84:	f10a 0a01 	add.w	sl, sl, #1
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	9307      	str	r3, [sp, #28]
 8004b8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b90:	931a      	str	r3, [sp, #104]	; 0x68
 8004b92:	4654      	mov	r4, sl
 8004b94:	2205      	movs	r2, #5
 8004b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b9a:	4858      	ldr	r0, [pc, #352]	; (8004cfc <_vfiprintf_r+0x24c>)
 8004b9c:	f7fb fb38 	bl	8000210 <memchr>
 8004ba0:	9a04      	ldr	r2, [sp, #16]
 8004ba2:	b9d8      	cbnz	r0, 8004bdc <_vfiprintf_r+0x12c>
 8004ba4:	06d1      	lsls	r1, r2, #27
 8004ba6:	bf44      	itt	mi
 8004ba8:	2320      	movmi	r3, #32
 8004baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bae:	0713      	lsls	r3, r2, #28
 8004bb0:	bf44      	itt	mi
 8004bb2:	232b      	movmi	r3, #43	; 0x2b
 8004bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8004bbe:	d015      	beq.n	8004bec <_vfiprintf_r+0x13c>
 8004bc0:	9a07      	ldr	r2, [sp, #28]
 8004bc2:	4654      	mov	r4, sl
 8004bc4:	2000      	movs	r0, #0
 8004bc6:	f04f 0c0a 	mov.w	ip, #10
 8004bca:	4621      	mov	r1, r4
 8004bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bd0:	3b30      	subs	r3, #48	; 0x30
 8004bd2:	2b09      	cmp	r3, #9
 8004bd4:	d94e      	bls.n	8004c74 <_vfiprintf_r+0x1c4>
 8004bd6:	b1b0      	cbz	r0, 8004c06 <_vfiprintf_r+0x156>
 8004bd8:	9207      	str	r2, [sp, #28]
 8004bda:	e014      	b.n	8004c06 <_vfiprintf_r+0x156>
 8004bdc:	eba0 0308 	sub.w	r3, r0, r8
 8004be0:	fa09 f303 	lsl.w	r3, r9, r3
 8004be4:	4313      	orrs	r3, r2
 8004be6:	9304      	str	r3, [sp, #16]
 8004be8:	46a2      	mov	sl, r4
 8004bea:	e7d2      	b.n	8004b92 <_vfiprintf_r+0xe2>
 8004bec:	9b03      	ldr	r3, [sp, #12]
 8004bee:	1d19      	adds	r1, r3, #4
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	9103      	str	r1, [sp, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bfbb      	ittet	lt
 8004bf8:	425b      	neglt	r3, r3
 8004bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8004bfe:	9307      	strge	r3, [sp, #28]
 8004c00:	9307      	strlt	r3, [sp, #28]
 8004c02:	bfb8      	it	lt
 8004c04:	9204      	strlt	r2, [sp, #16]
 8004c06:	7823      	ldrb	r3, [r4, #0]
 8004c08:	2b2e      	cmp	r3, #46	; 0x2e
 8004c0a:	d10c      	bne.n	8004c26 <_vfiprintf_r+0x176>
 8004c0c:	7863      	ldrb	r3, [r4, #1]
 8004c0e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c10:	d135      	bne.n	8004c7e <_vfiprintf_r+0x1ce>
 8004c12:	9b03      	ldr	r3, [sp, #12]
 8004c14:	1d1a      	adds	r2, r3, #4
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	9203      	str	r2, [sp, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bfb8      	it	lt
 8004c1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c22:	3402      	adds	r4, #2
 8004c24:	9305      	str	r3, [sp, #20]
 8004c26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d0c <_vfiprintf_r+0x25c>
 8004c2a:	7821      	ldrb	r1, [r4, #0]
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	4650      	mov	r0, sl
 8004c30:	f7fb faee 	bl	8000210 <memchr>
 8004c34:	b140      	cbz	r0, 8004c48 <_vfiprintf_r+0x198>
 8004c36:	2340      	movs	r3, #64	; 0x40
 8004c38:	eba0 000a 	sub.w	r0, r0, sl
 8004c3c:	fa03 f000 	lsl.w	r0, r3, r0
 8004c40:	9b04      	ldr	r3, [sp, #16]
 8004c42:	4303      	orrs	r3, r0
 8004c44:	3401      	adds	r4, #1
 8004c46:	9304      	str	r3, [sp, #16]
 8004c48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c4c:	482c      	ldr	r0, [pc, #176]	; (8004d00 <_vfiprintf_r+0x250>)
 8004c4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c52:	2206      	movs	r2, #6
 8004c54:	f7fb fadc 	bl	8000210 <memchr>
 8004c58:	2800      	cmp	r0, #0
 8004c5a:	d03f      	beq.n	8004cdc <_vfiprintf_r+0x22c>
 8004c5c:	4b29      	ldr	r3, [pc, #164]	; (8004d04 <_vfiprintf_r+0x254>)
 8004c5e:	bb1b      	cbnz	r3, 8004ca8 <_vfiprintf_r+0x1f8>
 8004c60:	9b03      	ldr	r3, [sp, #12]
 8004c62:	3307      	adds	r3, #7
 8004c64:	f023 0307 	bic.w	r3, r3, #7
 8004c68:	3308      	adds	r3, #8
 8004c6a:	9303      	str	r3, [sp, #12]
 8004c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6e:	443b      	add	r3, r7
 8004c70:	9309      	str	r3, [sp, #36]	; 0x24
 8004c72:	e767      	b.n	8004b44 <_vfiprintf_r+0x94>
 8004c74:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c78:	460c      	mov	r4, r1
 8004c7a:	2001      	movs	r0, #1
 8004c7c:	e7a5      	b.n	8004bca <_vfiprintf_r+0x11a>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	3401      	adds	r4, #1
 8004c82:	9305      	str	r3, [sp, #20]
 8004c84:	4619      	mov	r1, r3
 8004c86:	f04f 0c0a 	mov.w	ip, #10
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c90:	3a30      	subs	r2, #48	; 0x30
 8004c92:	2a09      	cmp	r2, #9
 8004c94:	d903      	bls.n	8004c9e <_vfiprintf_r+0x1ee>
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0c5      	beq.n	8004c26 <_vfiprintf_r+0x176>
 8004c9a:	9105      	str	r1, [sp, #20]
 8004c9c:	e7c3      	b.n	8004c26 <_vfiprintf_r+0x176>
 8004c9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ca2:	4604      	mov	r4, r0
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e7f0      	b.n	8004c8a <_vfiprintf_r+0x1da>
 8004ca8:	ab03      	add	r3, sp, #12
 8004caa:	9300      	str	r3, [sp, #0]
 8004cac:	462a      	mov	r2, r5
 8004cae:	4b16      	ldr	r3, [pc, #88]	; (8004d08 <_vfiprintf_r+0x258>)
 8004cb0:	a904      	add	r1, sp, #16
 8004cb2:	4630      	mov	r0, r6
 8004cb4:	f3af 8000 	nop.w
 8004cb8:	4607      	mov	r7, r0
 8004cba:	1c78      	adds	r0, r7, #1
 8004cbc:	d1d6      	bne.n	8004c6c <_vfiprintf_r+0x1bc>
 8004cbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cc0:	07d9      	lsls	r1, r3, #31
 8004cc2:	d405      	bmi.n	8004cd0 <_vfiprintf_r+0x220>
 8004cc4:	89ab      	ldrh	r3, [r5, #12]
 8004cc6:	059a      	lsls	r2, r3, #22
 8004cc8:	d402      	bmi.n	8004cd0 <_vfiprintf_r+0x220>
 8004cca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ccc:	f7ff fc5b 	bl	8004586 <__retarget_lock_release_recursive>
 8004cd0:	89ab      	ldrh	r3, [r5, #12]
 8004cd2:	065b      	lsls	r3, r3, #25
 8004cd4:	f53f af12 	bmi.w	8004afc <_vfiprintf_r+0x4c>
 8004cd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cda:	e711      	b.n	8004b00 <_vfiprintf_r+0x50>
 8004cdc:	ab03      	add	r3, sp, #12
 8004cde:	9300      	str	r3, [sp, #0]
 8004ce0:	462a      	mov	r2, r5
 8004ce2:	4b09      	ldr	r3, [pc, #36]	; (8004d08 <_vfiprintf_r+0x258>)
 8004ce4:	a904      	add	r1, sp, #16
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f000 f880 	bl	8004dec <_printf_i>
 8004cec:	e7e4      	b.n	8004cb8 <_vfiprintf_r+0x208>
 8004cee:	bf00      	nop
 8004cf0:	08005314 	.word	0x08005314
 8004cf4:	08005334 	.word	0x08005334
 8004cf8:	080052f4 	.word	0x080052f4
 8004cfc:	08005354 	.word	0x08005354
 8004d00:	0800535e 	.word	0x0800535e
 8004d04:	00000000 	.word	0x00000000
 8004d08:	08004a8b 	.word	0x08004a8b
 8004d0c:	0800535a 	.word	0x0800535a

08004d10 <_printf_common>:
 8004d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d14:	4616      	mov	r6, r2
 8004d16:	4699      	mov	r9, r3
 8004d18:	688a      	ldr	r2, [r1, #8]
 8004d1a:	690b      	ldr	r3, [r1, #16]
 8004d1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	bfb8      	it	lt
 8004d24:	4613      	movlt	r3, r2
 8004d26:	6033      	str	r3, [r6, #0]
 8004d28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d2c:	4607      	mov	r7, r0
 8004d2e:	460c      	mov	r4, r1
 8004d30:	b10a      	cbz	r2, 8004d36 <_printf_common+0x26>
 8004d32:	3301      	adds	r3, #1
 8004d34:	6033      	str	r3, [r6, #0]
 8004d36:	6823      	ldr	r3, [r4, #0]
 8004d38:	0699      	lsls	r1, r3, #26
 8004d3a:	bf42      	ittt	mi
 8004d3c:	6833      	ldrmi	r3, [r6, #0]
 8004d3e:	3302      	addmi	r3, #2
 8004d40:	6033      	strmi	r3, [r6, #0]
 8004d42:	6825      	ldr	r5, [r4, #0]
 8004d44:	f015 0506 	ands.w	r5, r5, #6
 8004d48:	d106      	bne.n	8004d58 <_printf_common+0x48>
 8004d4a:	f104 0a19 	add.w	sl, r4, #25
 8004d4e:	68e3      	ldr	r3, [r4, #12]
 8004d50:	6832      	ldr	r2, [r6, #0]
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	42ab      	cmp	r3, r5
 8004d56:	dc26      	bgt.n	8004da6 <_printf_common+0x96>
 8004d58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d5c:	1e13      	subs	r3, r2, #0
 8004d5e:	6822      	ldr	r2, [r4, #0]
 8004d60:	bf18      	it	ne
 8004d62:	2301      	movne	r3, #1
 8004d64:	0692      	lsls	r2, r2, #26
 8004d66:	d42b      	bmi.n	8004dc0 <_printf_common+0xb0>
 8004d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d6c:	4649      	mov	r1, r9
 8004d6e:	4638      	mov	r0, r7
 8004d70:	47c0      	blx	r8
 8004d72:	3001      	adds	r0, #1
 8004d74:	d01e      	beq.n	8004db4 <_printf_common+0xa4>
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	68e5      	ldr	r5, [r4, #12]
 8004d7a:	6832      	ldr	r2, [r6, #0]
 8004d7c:	f003 0306 	and.w	r3, r3, #6
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	bf08      	it	eq
 8004d84:	1aad      	subeq	r5, r5, r2
 8004d86:	68a3      	ldr	r3, [r4, #8]
 8004d88:	6922      	ldr	r2, [r4, #16]
 8004d8a:	bf0c      	ite	eq
 8004d8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d90:	2500      	movne	r5, #0
 8004d92:	4293      	cmp	r3, r2
 8004d94:	bfc4      	itt	gt
 8004d96:	1a9b      	subgt	r3, r3, r2
 8004d98:	18ed      	addgt	r5, r5, r3
 8004d9a:	2600      	movs	r6, #0
 8004d9c:	341a      	adds	r4, #26
 8004d9e:	42b5      	cmp	r5, r6
 8004da0:	d11a      	bne.n	8004dd8 <_printf_common+0xc8>
 8004da2:	2000      	movs	r0, #0
 8004da4:	e008      	b.n	8004db8 <_printf_common+0xa8>
 8004da6:	2301      	movs	r3, #1
 8004da8:	4652      	mov	r2, sl
 8004daa:	4649      	mov	r1, r9
 8004dac:	4638      	mov	r0, r7
 8004dae:	47c0      	blx	r8
 8004db0:	3001      	adds	r0, #1
 8004db2:	d103      	bne.n	8004dbc <_printf_common+0xac>
 8004db4:	f04f 30ff 	mov.w	r0, #4294967295
 8004db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dbc:	3501      	adds	r5, #1
 8004dbe:	e7c6      	b.n	8004d4e <_printf_common+0x3e>
 8004dc0:	18e1      	adds	r1, r4, r3
 8004dc2:	1c5a      	adds	r2, r3, #1
 8004dc4:	2030      	movs	r0, #48	; 0x30
 8004dc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dca:	4422      	add	r2, r4
 8004dcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dd4:	3302      	adds	r3, #2
 8004dd6:	e7c7      	b.n	8004d68 <_printf_common+0x58>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	4622      	mov	r2, r4
 8004ddc:	4649      	mov	r1, r9
 8004dde:	4638      	mov	r0, r7
 8004de0:	47c0      	blx	r8
 8004de2:	3001      	adds	r0, #1
 8004de4:	d0e6      	beq.n	8004db4 <_printf_common+0xa4>
 8004de6:	3601      	adds	r6, #1
 8004de8:	e7d9      	b.n	8004d9e <_printf_common+0x8e>
	...

08004dec <_printf_i>:
 8004dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df0:	460c      	mov	r4, r1
 8004df2:	4691      	mov	r9, r2
 8004df4:	7e27      	ldrb	r7, [r4, #24]
 8004df6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004df8:	2f78      	cmp	r7, #120	; 0x78
 8004dfa:	4680      	mov	r8, r0
 8004dfc:	469a      	mov	sl, r3
 8004dfe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e02:	d807      	bhi.n	8004e14 <_printf_i+0x28>
 8004e04:	2f62      	cmp	r7, #98	; 0x62
 8004e06:	d80a      	bhi.n	8004e1e <_printf_i+0x32>
 8004e08:	2f00      	cmp	r7, #0
 8004e0a:	f000 80d8 	beq.w	8004fbe <_printf_i+0x1d2>
 8004e0e:	2f58      	cmp	r7, #88	; 0x58
 8004e10:	f000 80a3 	beq.w	8004f5a <_printf_i+0x16e>
 8004e14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e1c:	e03a      	b.n	8004e94 <_printf_i+0xa8>
 8004e1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e22:	2b15      	cmp	r3, #21
 8004e24:	d8f6      	bhi.n	8004e14 <_printf_i+0x28>
 8004e26:	a001      	add	r0, pc, #4	; (adr r0, 8004e2c <_printf_i+0x40>)
 8004e28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e2c:	08004e85 	.word	0x08004e85
 8004e30:	08004e99 	.word	0x08004e99
 8004e34:	08004e15 	.word	0x08004e15
 8004e38:	08004e15 	.word	0x08004e15
 8004e3c:	08004e15 	.word	0x08004e15
 8004e40:	08004e15 	.word	0x08004e15
 8004e44:	08004e99 	.word	0x08004e99
 8004e48:	08004e15 	.word	0x08004e15
 8004e4c:	08004e15 	.word	0x08004e15
 8004e50:	08004e15 	.word	0x08004e15
 8004e54:	08004e15 	.word	0x08004e15
 8004e58:	08004fa5 	.word	0x08004fa5
 8004e5c:	08004ec9 	.word	0x08004ec9
 8004e60:	08004f87 	.word	0x08004f87
 8004e64:	08004e15 	.word	0x08004e15
 8004e68:	08004e15 	.word	0x08004e15
 8004e6c:	08004fc7 	.word	0x08004fc7
 8004e70:	08004e15 	.word	0x08004e15
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004e15 	.word	0x08004e15
 8004e7c:	08004e15 	.word	0x08004e15
 8004e80:	08004f8f 	.word	0x08004f8f
 8004e84:	680b      	ldr	r3, [r1, #0]
 8004e86:	1d1a      	adds	r2, r3, #4
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	600a      	str	r2, [r1, #0]
 8004e8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0a3      	b.n	8004fe0 <_printf_i+0x1f4>
 8004e98:	6825      	ldr	r5, [r4, #0]
 8004e9a:	6808      	ldr	r0, [r1, #0]
 8004e9c:	062e      	lsls	r6, r5, #24
 8004e9e:	f100 0304 	add.w	r3, r0, #4
 8004ea2:	d50a      	bpl.n	8004eba <_printf_i+0xce>
 8004ea4:	6805      	ldr	r5, [r0, #0]
 8004ea6:	600b      	str	r3, [r1, #0]
 8004ea8:	2d00      	cmp	r5, #0
 8004eaa:	da03      	bge.n	8004eb4 <_printf_i+0xc8>
 8004eac:	232d      	movs	r3, #45	; 0x2d
 8004eae:	426d      	negs	r5, r5
 8004eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb4:	485e      	ldr	r0, [pc, #376]	; (8005030 <_printf_i+0x244>)
 8004eb6:	230a      	movs	r3, #10
 8004eb8:	e019      	b.n	8004eee <_printf_i+0x102>
 8004eba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ebe:	6805      	ldr	r5, [r0, #0]
 8004ec0:	600b      	str	r3, [r1, #0]
 8004ec2:	bf18      	it	ne
 8004ec4:	b22d      	sxthne	r5, r5
 8004ec6:	e7ef      	b.n	8004ea8 <_printf_i+0xbc>
 8004ec8:	680b      	ldr	r3, [r1, #0]
 8004eca:	6825      	ldr	r5, [r4, #0]
 8004ecc:	1d18      	adds	r0, r3, #4
 8004ece:	6008      	str	r0, [r1, #0]
 8004ed0:	0628      	lsls	r0, r5, #24
 8004ed2:	d501      	bpl.n	8004ed8 <_printf_i+0xec>
 8004ed4:	681d      	ldr	r5, [r3, #0]
 8004ed6:	e002      	b.n	8004ede <_printf_i+0xf2>
 8004ed8:	0669      	lsls	r1, r5, #25
 8004eda:	d5fb      	bpl.n	8004ed4 <_printf_i+0xe8>
 8004edc:	881d      	ldrh	r5, [r3, #0]
 8004ede:	4854      	ldr	r0, [pc, #336]	; (8005030 <_printf_i+0x244>)
 8004ee0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2308      	moveq	r3, #8
 8004ee6:	230a      	movne	r3, #10
 8004ee8:	2100      	movs	r1, #0
 8004eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004eee:	6866      	ldr	r6, [r4, #4]
 8004ef0:	60a6      	str	r6, [r4, #8]
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	bfa2      	ittt	ge
 8004ef6:	6821      	ldrge	r1, [r4, #0]
 8004ef8:	f021 0104 	bicge.w	r1, r1, #4
 8004efc:	6021      	strge	r1, [r4, #0]
 8004efe:	b90d      	cbnz	r5, 8004f04 <_printf_i+0x118>
 8004f00:	2e00      	cmp	r6, #0
 8004f02:	d04d      	beq.n	8004fa0 <_printf_i+0x1b4>
 8004f04:	4616      	mov	r6, r2
 8004f06:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f0a:	fb03 5711 	mls	r7, r3, r1, r5
 8004f0e:	5dc7      	ldrb	r7, [r0, r7]
 8004f10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f14:	462f      	mov	r7, r5
 8004f16:	42bb      	cmp	r3, r7
 8004f18:	460d      	mov	r5, r1
 8004f1a:	d9f4      	bls.n	8004f06 <_printf_i+0x11a>
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d10b      	bne.n	8004f38 <_printf_i+0x14c>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	07df      	lsls	r7, r3, #31
 8004f24:	d508      	bpl.n	8004f38 <_printf_i+0x14c>
 8004f26:	6923      	ldr	r3, [r4, #16]
 8004f28:	6861      	ldr	r1, [r4, #4]
 8004f2a:	4299      	cmp	r1, r3
 8004f2c:	bfde      	ittt	le
 8004f2e:	2330      	movle	r3, #48	; 0x30
 8004f30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f38:	1b92      	subs	r2, r2, r6
 8004f3a:	6122      	str	r2, [r4, #16]
 8004f3c:	f8cd a000 	str.w	sl, [sp]
 8004f40:	464b      	mov	r3, r9
 8004f42:	aa03      	add	r2, sp, #12
 8004f44:	4621      	mov	r1, r4
 8004f46:	4640      	mov	r0, r8
 8004f48:	f7ff fee2 	bl	8004d10 <_printf_common>
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d14c      	bne.n	8004fea <_printf_i+0x1fe>
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295
 8004f54:	b004      	add	sp, #16
 8004f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f5a:	4835      	ldr	r0, [pc, #212]	; (8005030 <_printf_i+0x244>)
 8004f5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	680e      	ldr	r6, [r1, #0]
 8004f64:	061f      	lsls	r7, r3, #24
 8004f66:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f6a:	600e      	str	r6, [r1, #0]
 8004f6c:	d514      	bpl.n	8004f98 <_printf_i+0x1ac>
 8004f6e:	07d9      	lsls	r1, r3, #31
 8004f70:	bf44      	itt	mi
 8004f72:	f043 0320 	orrmi.w	r3, r3, #32
 8004f76:	6023      	strmi	r3, [r4, #0]
 8004f78:	b91d      	cbnz	r5, 8004f82 <_printf_i+0x196>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	f023 0320 	bic.w	r3, r3, #32
 8004f80:	6023      	str	r3, [r4, #0]
 8004f82:	2310      	movs	r3, #16
 8004f84:	e7b0      	b.n	8004ee8 <_printf_i+0xfc>
 8004f86:	6823      	ldr	r3, [r4, #0]
 8004f88:	f043 0320 	orr.w	r3, r3, #32
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	2378      	movs	r3, #120	; 0x78
 8004f90:	4828      	ldr	r0, [pc, #160]	; (8005034 <_printf_i+0x248>)
 8004f92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f96:	e7e3      	b.n	8004f60 <_printf_i+0x174>
 8004f98:	065e      	lsls	r6, r3, #25
 8004f9a:	bf48      	it	mi
 8004f9c:	b2ad      	uxthmi	r5, r5
 8004f9e:	e7e6      	b.n	8004f6e <_printf_i+0x182>
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	e7bb      	b.n	8004f1c <_printf_i+0x130>
 8004fa4:	680b      	ldr	r3, [r1, #0]
 8004fa6:	6826      	ldr	r6, [r4, #0]
 8004fa8:	6960      	ldr	r0, [r4, #20]
 8004faa:	1d1d      	adds	r5, r3, #4
 8004fac:	600d      	str	r5, [r1, #0]
 8004fae:	0635      	lsls	r5, r6, #24
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_i+0x1cc>
 8004fb4:	6018      	str	r0, [r3, #0]
 8004fb6:	e002      	b.n	8004fbe <_printf_i+0x1d2>
 8004fb8:	0671      	lsls	r1, r6, #25
 8004fba:	d5fb      	bpl.n	8004fb4 <_printf_i+0x1c8>
 8004fbc:	8018      	strh	r0, [r3, #0]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6123      	str	r3, [r4, #16]
 8004fc2:	4616      	mov	r6, r2
 8004fc4:	e7ba      	b.n	8004f3c <_printf_i+0x150>
 8004fc6:	680b      	ldr	r3, [r1, #0]
 8004fc8:	1d1a      	adds	r2, r3, #4
 8004fca:	600a      	str	r2, [r1, #0]
 8004fcc:	681e      	ldr	r6, [r3, #0]
 8004fce:	6862      	ldr	r2, [r4, #4]
 8004fd0:	2100      	movs	r1, #0
 8004fd2:	4630      	mov	r0, r6
 8004fd4:	f7fb f91c 	bl	8000210 <memchr>
 8004fd8:	b108      	cbz	r0, 8004fde <_printf_i+0x1f2>
 8004fda:	1b80      	subs	r0, r0, r6
 8004fdc:	6060      	str	r0, [r4, #4]
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	6123      	str	r3, [r4, #16]
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fe8:	e7a8      	b.n	8004f3c <_printf_i+0x150>
 8004fea:	6923      	ldr	r3, [r4, #16]
 8004fec:	4632      	mov	r2, r6
 8004fee:	4649      	mov	r1, r9
 8004ff0:	4640      	mov	r0, r8
 8004ff2:	47d0      	blx	sl
 8004ff4:	3001      	adds	r0, #1
 8004ff6:	d0ab      	beq.n	8004f50 <_printf_i+0x164>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	079b      	lsls	r3, r3, #30
 8004ffc:	d413      	bmi.n	8005026 <_printf_i+0x23a>
 8004ffe:	68e0      	ldr	r0, [r4, #12]
 8005000:	9b03      	ldr	r3, [sp, #12]
 8005002:	4298      	cmp	r0, r3
 8005004:	bfb8      	it	lt
 8005006:	4618      	movlt	r0, r3
 8005008:	e7a4      	b.n	8004f54 <_printf_i+0x168>
 800500a:	2301      	movs	r3, #1
 800500c:	4632      	mov	r2, r6
 800500e:	4649      	mov	r1, r9
 8005010:	4640      	mov	r0, r8
 8005012:	47d0      	blx	sl
 8005014:	3001      	adds	r0, #1
 8005016:	d09b      	beq.n	8004f50 <_printf_i+0x164>
 8005018:	3501      	adds	r5, #1
 800501a:	68e3      	ldr	r3, [r4, #12]
 800501c:	9903      	ldr	r1, [sp, #12]
 800501e:	1a5b      	subs	r3, r3, r1
 8005020:	42ab      	cmp	r3, r5
 8005022:	dcf2      	bgt.n	800500a <_printf_i+0x21e>
 8005024:	e7eb      	b.n	8004ffe <_printf_i+0x212>
 8005026:	2500      	movs	r5, #0
 8005028:	f104 0619 	add.w	r6, r4, #25
 800502c:	e7f5      	b.n	800501a <_printf_i+0x22e>
 800502e:	bf00      	nop
 8005030:	08005365 	.word	0x08005365
 8005034:	08005376 	.word	0x08005376

08005038 <_sbrk_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4d06      	ldr	r5, [pc, #24]	; (8005054 <_sbrk_r+0x1c>)
 800503c:	2300      	movs	r3, #0
 800503e:	4604      	mov	r4, r0
 8005040:	4608      	mov	r0, r1
 8005042:	602b      	str	r3, [r5, #0]
 8005044:	f7fc f8aa 	bl	800119c <_sbrk>
 8005048:	1c43      	adds	r3, r0, #1
 800504a:	d102      	bne.n	8005052 <_sbrk_r+0x1a>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b103      	cbz	r3, 8005052 <_sbrk_r+0x1a>
 8005050:	6023      	str	r3, [r4, #0]
 8005052:	bd38      	pop	{r3, r4, r5, pc}
 8005054:	20000260 	.word	0x20000260

08005058 <__sread>:
 8005058:	b510      	push	{r4, lr}
 800505a:	460c      	mov	r4, r1
 800505c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005060:	f000 f8ee 	bl	8005240 <_read_r>
 8005064:	2800      	cmp	r0, #0
 8005066:	bfab      	itete	ge
 8005068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800506a:	89a3      	ldrhlt	r3, [r4, #12]
 800506c:	181b      	addge	r3, r3, r0
 800506e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005072:	bfac      	ite	ge
 8005074:	6563      	strge	r3, [r4, #84]	; 0x54
 8005076:	81a3      	strhlt	r3, [r4, #12]
 8005078:	bd10      	pop	{r4, pc}

0800507a <__swrite>:
 800507a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800507e:	461f      	mov	r7, r3
 8005080:	898b      	ldrh	r3, [r1, #12]
 8005082:	05db      	lsls	r3, r3, #23
 8005084:	4605      	mov	r5, r0
 8005086:	460c      	mov	r4, r1
 8005088:	4616      	mov	r6, r2
 800508a:	d505      	bpl.n	8005098 <__swrite+0x1e>
 800508c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005090:	2302      	movs	r3, #2
 8005092:	2200      	movs	r2, #0
 8005094:	f000 f868 	bl	8005168 <_lseek_r>
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800509e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050a2:	81a3      	strh	r3, [r4, #12]
 80050a4:	4632      	mov	r2, r6
 80050a6:	463b      	mov	r3, r7
 80050a8:	4628      	mov	r0, r5
 80050aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ae:	f000 b817 	b.w	80050e0 <_write_r>

080050b2 <__sseek>:
 80050b2:	b510      	push	{r4, lr}
 80050b4:	460c      	mov	r4, r1
 80050b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050ba:	f000 f855 	bl	8005168 <_lseek_r>
 80050be:	1c43      	adds	r3, r0, #1
 80050c0:	89a3      	ldrh	r3, [r4, #12]
 80050c2:	bf15      	itete	ne
 80050c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80050c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050ce:	81a3      	strheq	r3, [r4, #12]
 80050d0:	bf18      	it	ne
 80050d2:	81a3      	strhne	r3, [r4, #12]
 80050d4:	bd10      	pop	{r4, pc}

080050d6 <__sclose>:
 80050d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050da:	f000 b813 	b.w	8005104 <_close_r>
	...

080050e0 <_write_r>:
 80050e0:	b538      	push	{r3, r4, r5, lr}
 80050e2:	4d07      	ldr	r5, [pc, #28]	; (8005100 <_write_r+0x20>)
 80050e4:	4604      	mov	r4, r0
 80050e6:	4608      	mov	r0, r1
 80050e8:	4611      	mov	r1, r2
 80050ea:	2200      	movs	r2, #0
 80050ec:	602a      	str	r2, [r5, #0]
 80050ee:	461a      	mov	r2, r3
 80050f0:	f7fb fdf8 	bl	8000ce4 <_write>
 80050f4:	1c43      	adds	r3, r0, #1
 80050f6:	d102      	bne.n	80050fe <_write_r+0x1e>
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	b103      	cbz	r3, 80050fe <_write_r+0x1e>
 80050fc:	6023      	str	r3, [r4, #0]
 80050fe:	bd38      	pop	{r3, r4, r5, pc}
 8005100:	20000260 	.word	0x20000260

08005104 <_close_r>:
 8005104:	b538      	push	{r3, r4, r5, lr}
 8005106:	4d06      	ldr	r5, [pc, #24]	; (8005120 <_close_r+0x1c>)
 8005108:	2300      	movs	r3, #0
 800510a:	4604      	mov	r4, r0
 800510c:	4608      	mov	r0, r1
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	f7fc f80f 	bl	8001132 <_close>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_close_r+0x1a>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_close_r+0x1a>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	20000260 	.word	0x20000260

08005124 <_fstat_r>:
 8005124:	b538      	push	{r3, r4, r5, lr}
 8005126:	4d07      	ldr	r5, [pc, #28]	; (8005144 <_fstat_r+0x20>)
 8005128:	2300      	movs	r3, #0
 800512a:	4604      	mov	r4, r0
 800512c:	4608      	mov	r0, r1
 800512e:	4611      	mov	r1, r2
 8005130:	602b      	str	r3, [r5, #0]
 8005132:	f7fc f80a 	bl	800114a <_fstat>
 8005136:	1c43      	adds	r3, r0, #1
 8005138:	d102      	bne.n	8005140 <_fstat_r+0x1c>
 800513a:	682b      	ldr	r3, [r5, #0]
 800513c:	b103      	cbz	r3, 8005140 <_fstat_r+0x1c>
 800513e:	6023      	str	r3, [r4, #0]
 8005140:	bd38      	pop	{r3, r4, r5, pc}
 8005142:	bf00      	nop
 8005144:	20000260 	.word	0x20000260

08005148 <_isatty_r>:
 8005148:	b538      	push	{r3, r4, r5, lr}
 800514a:	4d06      	ldr	r5, [pc, #24]	; (8005164 <_isatty_r+0x1c>)
 800514c:	2300      	movs	r3, #0
 800514e:	4604      	mov	r4, r0
 8005150:	4608      	mov	r0, r1
 8005152:	602b      	str	r3, [r5, #0]
 8005154:	f7fc f809 	bl	800116a <_isatty>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_isatty_r+0x1a>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_isatty_r+0x1a>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	20000260 	.word	0x20000260

08005168 <_lseek_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d07      	ldr	r5, [pc, #28]	; (8005188 <_lseek_r+0x20>)
 800516c:	4604      	mov	r4, r0
 800516e:	4608      	mov	r0, r1
 8005170:	4611      	mov	r1, r2
 8005172:	2200      	movs	r2, #0
 8005174:	602a      	str	r2, [r5, #0]
 8005176:	461a      	mov	r2, r3
 8005178:	f7fc f802 	bl	8001180 <_lseek>
 800517c:	1c43      	adds	r3, r0, #1
 800517e:	d102      	bne.n	8005186 <_lseek_r+0x1e>
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	b103      	cbz	r3, 8005186 <_lseek_r+0x1e>
 8005184:	6023      	str	r3, [r4, #0]
 8005186:	bd38      	pop	{r3, r4, r5, pc}
 8005188:	20000260 	.word	0x20000260

0800518c <memcpy>:
 800518c:	440a      	add	r2, r1
 800518e:	4291      	cmp	r1, r2
 8005190:	f100 33ff 	add.w	r3, r0, #4294967295
 8005194:	d100      	bne.n	8005198 <memcpy+0xc>
 8005196:	4770      	bx	lr
 8005198:	b510      	push	{r4, lr}
 800519a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800519e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051a2:	4291      	cmp	r1, r2
 80051a4:	d1f9      	bne.n	800519a <memcpy+0xe>
 80051a6:	bd10      	pop	{r4, pc}

080051a8 <memmove>:
 80051a8:	4288      	cmp	r0, r1
 80051aa:	b510      	push	{r4, lr}
 80051ac:	eb01 0402 	add.w	r4, r1, r2
 80051b0:	d902      	bls.n	80051b8 <memmove+0x10>
 80051b2:	4284      	cmp	r4, r0
 80051b4:	4623      	mov	r3, r4
 80051b6:	d807      	bhi.n	80051c8 <memmove+0x20>
 80051b8:	1e43      	subs	r3, r0, #1
 80051ba:	42a1      	cmp	r1, r4
 80051bc:	d008      	beq.n	80051d0 <memmove+0x28>
 80051be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051c6:	e7f8      	b.n	80051ba <memmove+0x12>
 80051c8:	4402      	add	r2, r0
 80051ca:	4601      	mov	r1, r0
 80051cc:	428a      	cmp	r2, r1
 80051ce:	d100      	bne.n	80051d2 <memmove+0x2a>
 80051d0:	bd10      	pop	{r4, pc}
 80051d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051da:	e7f7      	b.n	80051cc <memmove+0x24>

080051dc <__malloc_lock>:
 80051dc:	4801      	ldr	r0, [pc, #4]	; (80051e4 <__malloc_lock+0x8>)
 80051de:	f7ff b9d1 	b.w	8004584 <__retarget_lock_acquire_recursive>
 80051e2:	bf00      	nop
 80051e4:	20000258 	.word	0x20000258

080051e8 <__malloc_unlock>:
 80051e8:	4801      	ldr	r0, [pc, #4]	; (80051f0 <__malloc_unlock+0x8>)
 80051ea:	f7ff b9cc 	b.w	8004586 <__retarget_lock_release_recursive>
 80051ee:	bf00      	nop
 80051f0:	20000258 	.word	0x20000258

080051f4 <_realloc_r>:
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f6:	4607      	mov	r7, r0
 80051f8:	4614      	mov	r4, r2
 80051fa:	460e      	mov	r6, r1
 80051fc:	b921      	cbnz	r1, 8005208 <_realloc_r+0x14>
 80051fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005202:	4611      	mov	r1, r2
 8005204:	f7ff ba74 	b.w	80046f0 <_malloc_r>
 8005208:	b922      	cbnz	r2, 8005214 <_realloc_r+0x20>
 800520a:	f7ff fa21 	bl	8004650 <_free_r>
 800520e:	4625      	mov	r5, r4
 8005210:	4628      	mov	r0, r5
 8005212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005214:	f000 f826 	bl	8005264 <_malloc_usable_size_r>
 8005218:	42a0      	cmp	r0, r4
 800521a:	d20f      	bcs.n	800523c <_realloc_r+0x48>
 800521c:	4621      	mov	r1, r4
 800521e:	4638      	mov	r0, r7
 8005220:	f7ff fa66 	bl	80046f0 <_malloc_r>
 8005224:	4605      	mov	r5, r0
 8005226:	2800      	cmp	r0, #0
 8005228:	d0f2      	beq.n	8005210 <_realloc_r+0x1c>
 800522a:	4631      	mov	r1, r6
 800522c:	4622      	mov	r2, r4
 800522e:	f7ff ffad 	bl	800518c <memcpy>
 8005232:	4631      	mov	r1, r6
 8005234:	4638      	mov	r0, r7
 8005236:	f7ff fa0b 	bl	8004650 <_free_r>
 800523a:	e7e9      	b.n	8005210 <_realloc_r+0x1c>
 800523c:	4635      	mov	r5, r6
 800523e:	e7e7      	b.n	8005210 <_realloc_r+0x1c>

08005240 <_read_r>:
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4d07      	ldr	r5, [pc, #28]	; (8005260 <_read_r+0x20>)
 8005244:	4604      	mov	r4, r0
 8005246:	4608      	mov	r0, r1
 8005248:	4611      	mov	r1, r2
 800524a:	2200      	movs	r2, #0
 800524c:	602a      	str	r2, [r5, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	f7fb ff52 	bl	80010f8 <_read>
 8005254:	1c43      	adds	r3, r0, #1
 8005256:	d102      	bne.n	800525e <_read_r+0x1e>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	b103      	cbz	r3, 800525e <_read_r+0x1e>
 800525c:	6023      	str	r3, [r4, #0]
 800525e:	bd38      	pop	{r3, r4, r5, pc}
 8005260:	20000260 	.word	0x20000260

08005264 <_malloc_usable_size_r>:
 8005264:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005268:	1f18      	subs	r0, r3, #4
 800526a:	2b00      	cmp	r3, #0
 800526c:	bfbc      	itt	lt
 800526e:	580b      	ldrlt	r3, [r1, r0]
 8005270:	18c0      	addlt	r0, r0, r3
 8005272:	4770      	bx	lr

08005274 <_init>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr

08005280 <_fini>:
 8005280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005282:	bf00      	nop
 8005284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005286:	bc08      	pop	{r3}
 8005288:	469e      	mov	lr, r3
 800528a:	4770      	bx	lr
